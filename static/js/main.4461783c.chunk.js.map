{"version":3,"sources":["screens/HomePage.tsx","reducer/Actions.ts","backend/FirebaseAuth.ts","screens/LoginPage.tsx","components/NavBar/NavBar.tsx","screens/BlogPage.tsx","screens/RecipePage.tsx","AppNav.tsx","reducer/Reducers.ts","appid.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","props","user","username","history","replace","Container","Component","connect","state","dispatch","bindActionCreators","withRouter","setUser","key","type","payload","FirebaseAuth","authFirebase","firestoreFirebase","loginWithEmailAndPassword","email","password","a","signInWithEmailAndPassword","answer","signUpWithEmailAndPasswod","name","surname","createUserWithEmailAndPassword","uid","collection","doc","set","registerDate","Date","resetPasswordWithEmail","sendPasswordResetEmail","this","firebase","auth","firestore","valSchema","Yup","shape","min","max","required","LoginPage","initialValues","onSubmit","values","actions","setSubmitting","setState","localStorage","setItem","push","console","log","validationSchema","render","formikBag","field","meta","form","Control","placeholder","touched","error","className","Row","style","justifyContent","Button","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","color","to","onClick","title","description","AddBlogPage","e","as","rows","RecipePage","AppNav","path","exact","component","BlogPage","INITIAL_STATE","getItem","store","createStore","combineReducers","action","firebaseid","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","initializeApp","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4461783c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { User } from '../reducer/Actions';\n\ninterface Props extends RouteComponentProps {\n    user: User;\n}\n\nexport class HomePage extends Component<Props> {\n    constructor(props: Props) {\n        super(props);\n        if (this.props.user.username === '')\n            this.props.history.replace('/login');\n    }\n\n    render() {\n        return <Container>HomePage</Container>;\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({}, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(HomePage));\n","import firebase from 'firebase';\n\nexport interface User {\n    username: string;\n}\n\n/**\n * Set the user to the redux store\n * @param {User} key\n */\n\nexport const setUser = (key: User) => ({\n    type: 'LOGIN',\n    payload: key,\n});\n","import firebase from 'firebase';\n\n/**\n *  All Operations for Authentication: Login, SignUp, Reset Password\n */\n\nexport class FirebaseAuth {\n    authFirebase: firebase.auth.Auth;\n    firestoreFirebase: firebase.firestore.Firestore;\n\n    constructor() {\n        this.authFirebase = firebase.auth();\n        this.firestoreFirebase = firebase.firestore();\n    }\n    /**\n     * @param {string} email Email of the user.\n     * @param {string} password Password of the user.\n     * @returns {firebase.auth.UserCredential} User info and all data required.\n     */\n\n    loginWithEmailAndPassword = async (email: string, password: string) => {\n        let answer = await this.authFirebase.signInWithEmailAndPassword(\n            email,\n            password\n        );\n        return answer;\n    };\n\n    /**\n     * This function creates a new user.\n     * @param {string} email Email of the user.\n     * @param {string} password Password of the user.\n     * @returns {firebase.auth.UserCredential} User info and all data required.\n     */\n\n    signUpWithEmailAndPasswod = async (\n        email: string,\n        password: string,\n        name: string,\n        surname: string\n    ) => {\n        /**\n         * In here, create a new user with email, password.\n         */\n        let answer = await this.authFirebase.createUserWithEmailAndPassword(\n            email,\n            password\n        );\n        if (answer.user === null) {\n            throw 'User can not be signed up';\n        }\n        /**\n         * The new user when signed up, it must add users name and surname.\n         * Also, Document id is going to be the new user uid.\n         */\n\n        let uid = answer.user.uid;\n        await this.firestoreFirebase\n            .collection('/Diyetisyenler')\n            .doc(uid)\n            .set({\n                name: name,\n                surname: surname,\n                email: email,\n                registerDate: new Date(),\n            });\n\n        return answer;\n    };\n\n    /**\n     * When user forgot the password, this function send an email to his account to reset.\n     * @param {string} email email of the user\n     *\n     */\n    resetPasswordWithEmail = async (email: string) => {\n        await this.authFirebase.sendPasswordResetEmail(email);\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport { User, setUser } from '../reducer/Actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseAuth } from '../backend/FirebaseAuth';\n\nconst valSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n    password: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n});\n\ninterface Props extends RouteComponentProps {\n    setUser: typeof setUser;\n}\n\ninterface State {\n    user: {\n        username: string;\n        password: string;\n    };\n}\n\nclass LoginPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                username: '',\n                password: '',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        this.setState({\n                            user: {\n                                username: values.username,\n                                password: values.password,\n                            },\n                        });\n                        let auth = new FirebaseAuth();\n                        try {\n                            const res = await auth.loginWithEmailAndPassword(\n                                values.username,\n                                values.password\n                            );\n                            localStorage.setItem('username', values.username);\n                            this.props.setUser({ username: values.username });\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"username\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                {...field}\n                                                placeholder=\"Username\"\n                                            />\n                                            {meta.touched && meta.error && (\n                                                <div className=\"text-danger\">\n                                                    {meta.error}\n                                                </div>\n                                            )}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"password\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            type=\"password\"\n                                            {...field}\n                                            placeholder=\"Password\"\n                                        />\n                                        {meta.touched && meta.error && (\n                                            <div className=\"text-danger\">\n                                                {meta.error}\n                                            </div>\n                                        )}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Login</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators(\n        {\n            setUser,\n        },\n        dispatch\n    );\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(LoginPage));\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport { User, setUser } from '../../reducer/Actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\ninterface Props {\n    user: User;\n    setUser: typeof setUser;\n}\n\nexport class NavBar extends Component<Props> {\n    render() {\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"/\">Diyetin</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link><Link style={{color: '#888'}} to=\"/\">Home</Link></Nav.Link>\n                        <Nav.Link><Link style={{color: '#888'}} to=\"/addblog\">Blog</Link></Nav.Link>\n                        <Nav.Link><Link style={{color: '#888'}} to=\"/addrecipe\">Tarif</Link></Nav.Link>\n                        <Nav.Link>\n                            <Link\n                                style={{color: '#888'}}\n                                to=\"/login\"\n                                onClick={() => {\n                                    this.props.setUser({ username: '' });\n                                    localStorage.setItem('username', '')\n                                }}\n                            >\n                                Logout\n                        </Link>\n                        </Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators(\n        {\n            setUser,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseAuth } from '../backend/FirebaseAuth';\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n    description: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n});\n\ninterface Props extends RouteComponentProps {}\n\ninterface State {\n    user: {\n        title: string;\n        description: string;\n    };\n}\n\nclass AddBlogPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                title: '',\n                description: '',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        try {\n                            console.log(values);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                {...field}\n                                                placeholder=\"Başlık\"\n                                            />\n                                            {meta.touched && meta.error && (\n                                                <div className=\"text-danger\">\n                                                    {meta.error}\n                                                </div>\n                                            )}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            rows=\"6\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && (\n                                            <div className=\"text-danger\">\n                                                {meta.error}\n                                            </div>\n                                        )}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Gönder</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(AddBlogPage);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseAuth } from '../backend/FirebaseAuth';\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n    description: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n});\n\ninterface Props extends RouteComponentProps {}\n\ninterface State {\n    user: {\n        title: string;\n        description: string;\n    };\n}\n\nclass RecipePage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                title: '',\n                description: '',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        try {\n                            console.log(values);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                {...field}\n                                                placeholder=\"Başlık\"\n                                            />\n                                            {meta.touched && meta.error && (\n                                                <div className=\"text-danger\">\n                                                    {meta.error}\n                                                </div>\n                                            )}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            rows=\"6\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && (\n                                            <div className=\"text-danger\">\n                                                {meta.error}\n                                            </div>\n                                        )}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Gönder</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(RecipePage);\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport HomePage from './screens/HomePage';\nimport LoginPage from './screens/LoginPage';\nimport NavBar from './components/NavBar/NavBar';\nimport BlogPage from './screens/BlogPage';\nimport RecipePage from './screens/RecipePage';\n\nexport class AppNav extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <NavBar />\n                    <Switch>\n                        <Route path=\"/login\" exact component={LoginPage} />\n                        <Route path=\"/addblog\" exact component={BlogPage} />\n                        <Route path=\"/addrecipe\" exact component={RecipePage} />\n                        <Route path=\"/\" exact component={HomePage} />\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default AppNav;\n","import { createStore, combineReducers } from 'redux';\nimport { User } from './Actions';\n\ninterface ActionUser {\n    payload: User;\n    type: string;\n}\n\nlet INITIAL_STATE = {\n    username: localStorage.getItem('username')\n        ? localStorage.getItem('username')\n        : '',\n};\n\nlet user = (state = INITIAL_STATE, action: ActionUser) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return (state = action.payload);\n        default:\n            return state;\n    }\n};\n\nexport const store = createStore(combineReducers({ user }));\n","export const firebaseid = {\n    apiKey: 'AIzaSyBn4BzBjPoDRiRD0zOAA56Ge0pONpQ6d6c',\n    authDomain: 'beslenmeblog-c313a.firebaseapp.com',\n    databaseURL: 'https://beslenmeblog-c313a.firebaseio.com',\n    projectId: 'beslenmeblog-c313a',\n    storageBucket: 'beslenmeblog-c313a.appspot.com',\n    messagingSenderId: '1042722828462',\n    appId: '1:1042722828462:web:aa5fc3f5539343c1c47d3f',\n    measurementId: 'G-LMXB8WYNJD',\n};\n","import React, { Component } from 'react';\nimport AppNav from './AppNav';\nimport { Provider } from 'react-redux';\nimport { store } from './reducer/Reducers';\nimport firebase from 'firebase';\nimport { firebaseid } from './appid';\n\nexport class App extends Component {\n    async componentDidMount() {\n        firebase.initializeApp(firebaseid);\n    }\n\n    render() {\n        return (\n            <Provider store={store}>\n                <AppNav />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}