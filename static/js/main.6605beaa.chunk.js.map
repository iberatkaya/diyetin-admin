{"version":3,"sources":["screens/HomePage.tsx","reducer/Actions.ts","backend/FirebaseAuth.ts","screens/LoginPage.tsx","components/NavBar/NavBar.tsx","backend/FirebaseBlog.ts","screens/Blog/BlogPage.tsx","backend/FirebaseRecipe.ts","screens/Recipe/RecipePage.tsx","backend/FirebaseFAQ.ts","screens/FAQPage.tsx","backend/FirebaseQuoteOfDay.ts","screens/QuotePage.tsx","screens/Recipe/DeleteRecipePage.tsx","screens/Blog/DeleteBlogPage.tsx","backend/FirebaseStorage.ts","screens/Blog/EditBlogPage.tsx","screens/Recipe/EditRecipePage.tsx","AppNav.tsx","reducer/Reducers.ts","appid.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","props","state","besRehNumber","DoğruBilinenYanlışlarNumber","HakkımızdaNumber","KiloAlmaNumber","KiloVermeNumber","SağlıklıYaşamNumber","SoruCevapNumber","ŞaşırtanBilgilerNumber","BlogNumber","TarifNumber","tarifNames","blogNames","firebase","firestore","doc","get","Blog","Tarif","besReh","DoğruBilinenYanlışlar","Hakkımızda","KiloAlma","KiloVerme","SağlıklıYaşam","SoruCevap","ŞaşırtanBilgiler","data","reviewNumber","Object","keys","this","setState","console","log","getStatistics","Container","style","textAlign","fontSize","user","username","margin","map","i","index","entries","values","name","height","Component","connect","dispatch","bindActionCreators","withRouter","setUser","key","type","payload","FirebaseAuth","authFirebase","firestoreFirebase","loginWithEmailAndPassword","email","password","a","signInWithEmailAndPassword","answer","signUpWithEmailAndPasswod","surname","createUserWithEmailAndPassword","Error","uid","collection","set","registerDate","Date","resetPasswordWithEmail","sendPasswordResetEmail","auth","valSchema","Yup","shape","min","max","required","LoginPage","initialValues","onSubmit","actions","setSubmitting","res","localStorage","setItem","firebaseuser","history","push","validationSchema","render","formikBag","field","meta","form","Control","autoComplete","placeholder","touched","error","className","Row","justifyContent","Button","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","color","to","onClick","FirebaseBlogOperations","storageFirebase","addNewBlog","header","references","imageUrl","mainIdea","blogText","author","length","add","EklenmeTarihi","BlogYazısı","AnaDüşünce","Başlık","Kaynaklar","Resim","Yazar","ans","updateBlogPost","documentReference","ref","path","update","uploadImage","image","date","getTime","put","getDownloadURL","getBlogDocs","docs","getDetailsOfDocument","title","DocumentReference","deleteBlogPost","urlImage","storage","refFromURL","delete","toArrayBuffer","require","description","topic","resource","writer","AddBlogPage","getBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","imagepreview","flexDirection","padding","blog","base64","convert","resimg","resadd","setFieldValue","as","rows","onChange","event","currentTarget","files","accept","Image","width","src","FirebaseRecipe","firestoreInstance","addHighCalorie","imageURL","recipeName","ingredients","howToCook","calorie","protein","carb","fat","servingSize","nameSurname","Kalori","toString","Karbonhidrat","Protein","Yağ","Kategori","Porsiyon","Tarifinİsmi","Yapılışı","YapanKişi","İçindekiler","addLowCalorie","addFitDesert","addFastRecipe","addLookingNew","addStudentRecipe","getHighCalories","arrayOfDocs","getLowCalories","getFitDeserts","getFastRecipes","getLookingNew","getStudentRecipe","nameOfRecipe","personWhoCooks","deleteRecipe","RecipePage","FR","imgurl","parseInt","parseFloat","Label","value","FirebaseFAQ","AddFalseKnownTrue","snapshot","exists","allData","questionArray","Soru","Cevap","Kaynak","AddGainWeight","AddLoseWeight","AddHealthLife","AddInterestingFacts","FAQPage","FAQ","QuoteOfDay","addNewQuote","newQuote","quoteData","sözler","arrayNew","QuoteOfDayPage","quotes","snap","getQuotes","QOD","qu","DeleteRecipePage","getItems","rec","dataFast","dataFit","dataHigh","dataLooking","dataLow","dataStudent","window","confirm","replace","DeleteBlogPost","deleteImage","url","notRequired","EditBlogPost","toEditDocumentRef","showEditPanel","local","localData","localUser","snapshotData","EditRecipePost","AppNav","exact","component","pathname","BlogPage","DeleteBlogPage","EditBlogPage","EditRecipePage","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","INITIAL_STATE","getItem","JSON","parse","store","createStore","combineReducers","action","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VA2BaA,EAAb,YAEI,WAAYC,GAAa,IAAD,8BACpB,4CAAMA,KACDC,MAAQ,CACTC,aAAc,EACdC,6CAA6B,EAC7BC,6BAAkB,EAClBC,eAAgB,EAChBC,gBAAiB,EACjBC,0CAAqB,EACrBC,gBAAiB,EAEjBC,wCAAwB,EACxBC,WAAY,GACZC,YAAa,GACbC,WAAY,GACZC,UAAW,IAfK,EAF5B,uPAyByBC,IAASC,YAAYC,IAAI,oBAAoBC,MAzBtE,cAyBYC,EAzBZ,gBA0B0BJ,IAASC,YAAYC,IAAI,qBAAqBC,MA1BxE,cA0BYE,EA1BZ,gBA6B2BL,IAASC,YAAYC,IAAI,+BAA+BC,MA7BnF,cA6BYG,EA7BZ,iBA8B0CN,IAASC,YAAYC,IAAI,oDAAqCC,MA9BxG,eA8BYI,EA9BZ,iBA+B+BP,IAASC,YAAYC,IAAI,oCAA0BC,MA/BlF,eA+BYK,EA/BZ,iBAgC6BR,IAASC,YAAYC,IAAI,wBAAwBC,MAhC9E,eAgCYM,EAhCZ,iBAiC8BT,IAASC,YAAYC,IAAI,yBAAyBC,MAjChF,eAiCYO,EAjCZ,iBAkCkCV,IAASC,YAAYC,IAAI,iDAA6BC,MAlCxF,eAkCYQ,EAlCZ,iBAmC8BX,IAASC,YAAYC,IAAI,yBAAyBC,MAnChF,eAmCYS,EAnCZ,iBAoCqCZ,IAASC,YAAYC,IAAI,+CAAgCC,MApC9F,QAoCYU,EApCZ,OAwCYzB,EAAoBkB,EAAOQ,OAAOC,aAElC1B,EAAmCkB,EAAsBO,OAAOC,aAEhEzB,EAAwBkB,EAAWM,OAAOC,aAE1CxB,EAAsBkB,EAASK,OAAOC,aAEtCvB,EAAuBkB,EAAUI,OAAOC,aAExCtB,EAA2BkB,EAAcG,OAAOC,aAEhDrB,EAAuBkB,EAAUE,OAAOC,aAExCpB,EAA8BkB,EAAiBC,OAAOC,aAGtDnB,EAA8CQ,EAAKU,OAEnDjB,EAA+CQ,EAAMS,OAErDhB,EAAakB,OAAOC,KAAKpB,GACzBE,EAAYiB,OAAOC,KAAKrB,GAG5BsB,KAAKC,SAAS,CACV/B,eACAC,+CACAC,+BACAC,iBACAC,kBACAC,4CACAC,kBAEAC,0CACAC,aACAC,cACAC,aACAC,cAEJqB,QAAQC,IAAI,MAAQH,KAAK/B,MAAMY,WAhFvC,iJAqFQmB,KAAKI,kBArFb,+BA0Fc,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,KACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,SAAU,SAA7C,mBAAmER,KAAKhC,MAAMyC,KAAKC,UACnF,yBAAKJ,MAAO,CAAEC,UAAW,SAAUC,SAAU,OAAQG,OAAQ,KAA7D,kDAEA,yBAAKL,MAAO,CAAEE,SAAU,OAAQG,OAAQ,KAAxC,SACA,4BACKX,KAAK/B,MAAMY,UAAU+B,KAAI,SAACC,EAAGC,GAC1B,IAAIC,EAAUjB,OAAOkB,OAAO,EAAK/C,MAAMS,YACnCuC,EAAOJ,EACX,OAEI,4BACKI,EADL,QACgBF,EAAQD,QAOpC,yBAAKR,MAAO,CAAEE,SAAU,OAAQG,OAAQ,KAAxC,aACA,4BACKX,KAAK/B,MAAMW,WAAWgC,KAAI,SAACC,EAAGC,GAC3B,IAAIC,EAAUjB,OAAOkB,OAAO,EAAK/C,MAAMU,aACnCsC,EAAOJ,EACX,OAEI,4BACKI,EADL,QACgBF,EAAQD,QAMpC,yBAAKR,MAAO,CAAEE,SAAU,OAAQG,OAAQ,KAAxC,qCAEA,4BACI,iDACuBX,KAAK/B,MAAMC,eAItC,4BACI,qDACiB8B,KAAK/B,MAAMG,6BAGhC,4BACI,2CACiB4B,KAAK/B,MAAMO,kBAGhC,yBAAK8B,MAAO,CAAEE,SAAU,OAAQG,OAAQ,KAAxC,QACA,4BACI,gEACuBX,KAAK/B,MAAMQ,wCAGtC,4BACI,qEAC4BuB,KAAK/B,MAAME,6CAG3C,4BACI,iDACuB6B,KAAK/B,MAAMK,kBAGtC,4BACI,gDACsB0B,KAAK/B,MAAMI,iBArEzC,KAuEW,4BACH,yEAC2B2B,KAAK/B,MAAMM,0CAI1C,yBAAK+B,MAAO,CAAEY,OAAQ,WAzKtC,GAA8BC,aA2LfC,eAPS,SAACnD,GAErB,MAAO,CAAEwC,KADQxC,EAATwC,SAIe,SAACY,GAAD,OAAmBC,YAAmB,GAAID,KAEtDD,CAA6CG,YAAWxD,I,uBC1M1DyD,EAAU,SAACC,GAAD,MAAgB,CACnCC,KAAM,QACNC,QAASF,I,sBCRAG,EAIT,aAAe,IAAD,gCAHdC,kBAGc,OAFdC,uBAEc,OAUdC,0BAVc,uCAUc,WAAOC,EAAeC,GAAtB,eAAAC,EAAA,sEACL,EAAKL,aAAaM,2BAA2BH,EAAOC,GAD/C,cACpBG,EADoB,yBAEjBA,EAAO3B,MAFU,2CAVd,6DAsBd4B,0BAtBc,uCAsBc,WAAOL,EAAeC,EAAkBhB,EAAcqB,GAAtD,iBAAAJ,EAAA,sEAIL,EAAKL,aAAaU,+BAA+BP,EAAOC,GAJnD,UAKJ,QADhBG,EAJoB,QAKb3B,KALa,sBAMd,IAAI+B,MAAM,6BANI,cAapBC,EAAML,EAAO3B,KAAKgC,IAbE,SAclB,EAAKX,kBACNY,WAAW,kBACX1D,IAAIyD,GACJE,IAAI,CACD1B,KAAMA,EACNqB,QAASA,EACTN,MAAOA,EACPY,aAAc,IAAIC,OArBF,gCAwBjBT,EAAO3B,MAxBU,2CAtBd,iEAsDdqC,uBAtDc,uCAsDW,WAAOd,GAAP,SAAAE,EAAA,sEACf,EAAKL,aAAakB,uBAAuBf,GAD1B,2CAtDX,sDACVhC,KAAK6B,aAAe/C,IAASkE,OAC7BhD,KAAK8B,kBAAoBhD,IAASC,aCEpCkE,EAAYC,MAAaC,MAAM,CACjCzC,SAAUwC,MACLE,IAAI,GACJC,IAAI,KACJC,SAAS,YACdrB,SAAUiB,MACLE,IAAI,GACJC,IAAI,KACJC,SAAS,cAcZC,E,YACF,WAAYvF,GAAe,IAAD,8BACtB,4CAAMA,KACDC,MAAQ,CACTwC,KAAM,CACFC,SAAU,GACVuB,SAAU,KALI,E,sEAUhB,IAAD,OACL,OACI,kBAAC5B,EAAA,EAAD,KACI,kBAAC,IAAD,CACImD,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,iBAAAxB,EAAA,6DACNwB,EAAQC,eAAc,GACtB,EAAK1D,SAAS,CACVQ,KAAM,CACFC,SAAUM,EAAON,SACjBuB,SAAUjB,EAAOiB,YAGrBe,EAAO,IAAIpB,EART,kBAUgBoB,EAAKjB,0BAA0Bf,EAAON,SAAUM,EAAOiB,UAVvE,UAWU,QADN2B,EAVJ,8BAWsB,IAAIpB,MAAM,oBAXhC,OAYFqB,aAAaC,QAAQ,WAAY9C,EAAON,UACxC,EAAK1C,MAAMwD,QAAQ,CACfd,SAAUM,EAAON,SACjBqD,aAAcH,IAElB,EAAK5F,MAAMgG,QAAQC,KAAK,KAjBtB,kDAmBF/D,QAAQC,IAAR,MAnBE,0DAAF,wDAsBR+D,iBAAkBjB,EAClBkB,OAAQ,SAACC,GAAD,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACInD,KAAK,WAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eAAe9C,KAAK,OAAO+C,aAAa,OAAUJ,EAAlD,CAAyDK,YAAY,cACpEJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,WAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eAAe9C,KAAK,WAAW+C,aAAa,OAAUJ,EAAtD,CAA6DK,YAAY,cACxEJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAACE,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQtD,KAAK,UAAb,mB,GAhERP,aA2FTC,eAbS,SAACnD,GAErB,MAAO,CAAEwC,KADQxC,EAATwC,SAIe,SAACY,GAAD,OACvBC,YACI,CACIE,WAEJH,KAGOD,CAA6CG,YAAWgC,I,gBClH1D0B,EAAb,iLACc,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,WACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKd,UAAU,WACX,kBAACc,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMtF,MAAO,CAAEuF,MAAO,QAAUC,GAAG,KAAnC,SAIJ,kBAACH,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMtF,MAAO,CAAEuF,MAAO,QAAUC,GAAG,YAAnC,SAIJ,kBAACH,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMtF,MAAO,CAAEuF,MAAO,QAAUC,GAAG,cAAnC,UAIJ,kBAACH,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMtF,MAAO,CAAEuF,MAAO,QAAUC,GAAG,QAAnC,QAIJ,kBAACH,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMtF,MAAO,CAAEuF,MAAO,QAAUC,GAAG,QAAnC,2BAI8B,OAAjC9F,KAAKhC,MAAMyC,KAAKsD,aACb,8BAEA,kBAAC4B,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CACItF,MAAO,CAAEuF,MAAO,QAChBC,GAAG,SACHC,QAAS,WACL,EAAK/H,MAAMwD,QAAQ,CACfd,SAAU,GACVqD,aAAc,KAElBF,aAAaC,QAAQ,WAAY,IACjCD,aAAaC,QAAQ,eAAgB,MAT7C,kBArChC,GAA4B3C,aA6EbC,eAbS,SAACnD,GAErB,MAAO,CAAEwC,KADQxC,EAATwC,SAIe,SAACY,GAAD,OACvBC,YACI,CACIE,WAEJH,KAGOD,CAA6C6D,G,QCjF/Ce,EAKT,aAAe,IAAD,gCAJdnE,kBAIc,OAHdC,uBAGc,OAFdmE,qBAEc,OAedC,WAfc,uCAeD,WAAOC,EAAgBC,EAAoBC,EAAkBC,EAAkBC,EAAkBC,GAAjG,eAAAtE,EAAA,2DACLiE,EAAOM,OAAS,KADX,sBAEC,IAAIjE,MAAM,6CAFX,gCAKW,EAAKV,kBAAkBY,WAAW,8BAA8BgE,IAAI,CAChFC,cAAe,IAAI9D,KACnB+D,uBAAYL,EACZM,wBAAYP,EACZQ,mBAAQX,EACRY,UAAWX,EACXY,MAAOX,EACPY,MAAOT,IAZN,cAKDU,EALC,yBAcEA,GAdF,oGAfC,qEA4CdC,eA5Cc,uCA4CG,WACbd,EACAF,EACAG,EACAC,EACAC,EACAJ,EACAgB,GAPa,SAAAlF,EAAA,sEASP,EAAKJ,kBAAkB9C,IAAIoI,EAAkBC,IAAIC,MAAMC,OAAO,CAChEX,uBAAYL,EACZM,wBAAYP,EACZQ,mBAAQX,EACRa,MAAOX,EACPU,UAAWX,EACXa,MAAOT,IAfE,2CA5CH,uEAmEdgB,YAnEc,uCAmEA,WAAOC,GAAP,iBAAAvF,EAAA,6DACNwF,GAAO,IAAI7E,MAAO8E,UADZ,SAES,EAAK1B,gBAAgBoB,IAAI,QAAUK,GAAME,IAAIH,GAFtD,cAENrF,EAFM,yBAGHA,EAAOiF,IAAIQ,kBAHR,2CAnEA,2DA4EdC,YA5Ec,sBA4EA,sBAAA5F,EAAA,sEACI,EAAKJ,kBAAkBY,WAAW,8BAA8BzD,MADpE,uCAC2E8I,MAD3E,2CA5EA,KAmFdC,qBAAuB,SAAEpI,GAGrB,MAAO,CACHqI,MAAOrI,EAAKA,OAAQkH,iBACpBN,OAAQ5G,EAAKA,OAAQqH,MACrBiB,kBAAmBtI,EAAKyH,MAzFlB,KAkGdc,eAlGc,uCAkGG,WAAMf,GAAN,eAAAlF,EAAA,sEACiBkF,EAAkBnI,MADnC,cACTmJ,EADS,OAC0CxI,OAAQoH,MADlD,SAEPlI,IAASuJ,UAAUC,WAAWF,GAAUG,SAFjC,uBAGPnB,EAAkBmB,SAHX,2CAlGH,sDACVvI,KAAK8B,kBAAoBhD,IAASC,YAClCiB,KAAK6B,aAAe/C,IAASkE,OAC7BhD,KAAKiG,gBAAkBnH,IAASuJ,WCLlCG,EAAgBC,EAAQ,IAExBxF,EAAYC,MAAaC,MAAM,CACjC8E,MAAO/E,MACFE,IAAI,GACJC,IAAI,IACJC,SAAS,kCACdoF,YAAaxF,MACRE,IAAI,GACJE,SAAS,kCACdqF,MAAOzF,MACFE,IAAI,GACJE,SAAS,kCACdsF,SAAU1F,MACLE,IAAI,GACJE,SAAS,kCACduF,OAAQ3F,MACHE,IAAI,GACJE,SAAS,kCACdmE,MAAOvE,MAAYI,SAAS,oCAiB1BwF,E,YACF,WAAY9K,GAAe,IAAD,8BACtB,4CAAMA,KAcV+K,UAAY,SAACC,GACT,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACZJ,EAAQE,EAAOG,SAEnBH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,OApBzB,EAAK/K,MAAQ,CACTwC,KAAM,CACFwH,MAAO,GACPS,YAAa,GACbC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRpB,MAAO,KACPiC,aAAc,KAVA,E,sEA0BhB,IAAD,OACL,OACI,kBAACrJ,EAAA,EAAD,KACI,yBAAKC,MAAO,CAACqJ,cAAc,SAASC,QAAQ,KACxC,kBAAC,IAAD,CAAMtJ,MAAO,CAAEuF,MAAO,OAASC,GAAG,WAAlC,aAGJ,yBAAKxF,MAAO,CAACY,OAAO,KAApB,KAEI,kBAAC,IAAD,CAAMZ,MAAO,CAAEuF,MAAO,QAAUC,GAAG,YAAnC,sBAMJ,kBAAC,IAAD,CACItC,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,uBAAAxB,EAAA,6DACNwB,EAAQC,eAAc,GADhB,SAGEkG,EAAO,IAAI7D,EAHb,SAIiB,EAAK+C,UAAU/H,EAAOyG,OAJvC,cAIEqC,EAJF,OAKF5J,QAAQC,IAAI2J,GACRC,EAAUvB,EAAcsB,GAC5B5J,QAAQC,IAAI4J,GAPV,UAQmBF,EAAKrC,YAAYuC,GARpC,WAQIC,EARJ,OASF9J,QAAQC,IAAI6J,GACG,OAAXA,EAVF,uBAUyB,IAAIxH,MAAM,2BAVnC,yBAWmBqH,EAAK3D,WACtBlF,EAAOiH,MACPjH,EAAO4H,SACPoB,EACAhJ,EAAO2H,MACP3H,EAAO0H,YACP1H,EAAO6H,QAjBT,QAWIoB,EAXJ,OAmBF/J,QAAQC,IAAI8J,GACZ,EAAKjM,MAAMgG,QAAQC,KAAK,KApBtB,kDAsBF/D,QAAQC,IAAR,MAtBE,0DAAF,wDAyBR+D,iBAAkBjB,EAClBkB,OAAQ,gBAAG+F,EAAH,EAAGA,cAAelJ,EAAlB,EAAkBA,OAAlB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,KAAK,QAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,wCAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,QAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,eAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,WAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CACI3D,KAAK,WAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,YAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAACE,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,iBAC1B,kBAAC,IAAD,CACI9D,KAAK,SAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eAAe9C,KAAK,OAAO+C,aAAa,OAAUJ,EAAlD,CAAyDK,YAAY,WACpEJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CAAO3D,KAAK,UACP,YAAgC,EAA7BoD,MAA6B,EAAtBE,KAAuB,IAAjBD,EAAgB,EAAhBA,KACb,OACI,kBAAC,IAAD,KACI,yBAAKO,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,WAEJ,yBAAKA,UAAU,eACX,2BACI5D,KAAK,QACLoJ,SAAQ,uCAAE,WAAOC,GAAP,eAAApI,EAAA,6DACNhC,QAAQC,IAAImK,EAAMC,cAAcC,MAAO,IACvCN,EAAc,QAASI,EAAMC,cAAcC,MAAO,IAC5C/J,EAAS,EAAKxC,MAAdwC,KAHA,SAIoB,EAAKsI,UAAUuB,EAAMC,cAAcC,MAAO,IAJ9D,OAIN/J,EAAKiJ,aAJC,OAKN,EAAKzJ,SAAS,CACVQ,SANE,2CAAF,sDASRiB,KAAK,OACL+I,OAAO,UACP5F,UAAU,sBAEd,2BAAOA,UAAU,qBACK,OAAjB7D,EAAOyG,MAAiBzG,EAAOyG,MAAMxG,KAAO,mBAIxDqD,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,YAMpD,KAAjC,EAAK3G,MAAMwC,KAAKiJ,aACb,8BAEI,kBAACrJ,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,WAC3B,kBAACmK,EAAA,EAAD,CACIpK,MAAO,CACHqK,MAAO,QACPzJ,OAAQ,SAEZ0J,IAAK,EAAK3M,MAAMwC,KAAKiJ,gBAIrC,kBAAC5E,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQtD,KAAK,UAAb,uB,GAxMNP,aAkNXI,cAAWuH,GCzPb+B,EAIT,aAAe,IAAD,gCAHdC,uBAGc,OAFd7E,qBAEc,OAoBd8E,eApBc,uCAoBG,WAAOC,EAAkBC,EAAoBC,EAAqBC,EAAmBC,EAAiBC,EAAiBC,EAAcC,EAAaC,EAAqBC,GAAvK,eAAAvJ,EAAA,6DAETtC,EAAO,CAEP8L,OAAQ,CACJA,OAAQN,EAAQO,WAChBC,aAAcN,EAAKK,WACnBE,QAASR,EAAQM,WACjBG,WAAKP,EAAII,YAEbI,SAAU,oBACVpF,cAAe,IAAI9D,KACnBmJ,SAAUR,EACVxE,MAAOgE,EACPiB,mBAAYhB,EACZiB,+BAASf,EACTgB,iBAAUV,EACVW,sBAAYlB,GAjBH,SAqBP,EAAKJ,kBAAkBpI,WAAW,gEAA6DgE,IAAI9G,GArB5F,2CApBH,6EA2DdyM,cA3Dc,uCA2DE,WAAOrB,EAAkBC,EAAoBC,EAAqBC,EAAmBC,EAAiBC,EAAiBC,EAAcC,EAAaC,EAAqBC,GAAvK,eAAAvJ,EAAA,6DAERtC,EAAO,CAEP8L,OAAQ,CACJA,OAAQN,EAAQO,WAChBC,aAAcN,EAAKK,WACnBE,QAASR,EAAQM,WACjBG,WAAKP,EAAII,YAEbI,SAAU,2BACVpF,cAAe,IAAI9D,KACnBmJ,SAAUR,EACVxE,MAAOgE,EACPiB,mBAAYhB,EACZiB,+BAASf,EACTgB,iBAAUV,EACVW,sBAAYlB,GAjBJ,SAqBN,EAAKJ,kBAAkBpI,WAAW,uEAA4DgE,IAAI9G,GArB5F,2CA3DF,6EAmGd0M,aAnGc,uCAmGC,WAAOtB,EAAkBC,EAAoBC,EAAqBC,EAAmBC,EAAiBC,EAAiBC,EAAcC,EAAaC,EAAqBC,GAAvK,eAAAvJ,EAAA,6DAEPtC,EAAO,CAEP8L,OAAQ,CACJA,OAAQN,EAAQO,WAChBC,aAAcN,EAAKK,WACnBE,QAASR,EAAQM,WACjBG,WAAKP,EAAII,YAEbI,SAAU,mBACVpF,cAAe,IAAI9D,KACnBmJ,SAAUR,EACVxE,MAAOgE,EACPiB,mBAAYhB,EACZiB,+BAASf,EACTgB,iBAAUV,EACVW,sBAAYlB,GAjBL,SAqBL,EAAKJ,kBAAkBpI,WAAW,+DAA0DgE,IAAI9G,GArB3F,2CAnGD,6EA2Id2M,cA3Ic,uCA2IE,WAAOvB,EAAkBC,EAAoBC,EAAqBC,EAAmBC,EAAiBC,EAAiBC,EAAcC,EAAaC,EAAqBC,GAAvK,eAAAvJ,EAAA,6DAERtC,EAAO,CAEP8L,OAAQ,CACJA,OAAQN,EAAQO,WAChBC,aAAcN,EAAKK,WACnBE,QAASR,EAAQM,WACjBG,WAAKP,EAAII,YAEbI,SAAU,0BACVpF,cAAe,IAAI9D,KACnBmJ,SAAUR,EACVxE,MAAOgE,EACPiB,mBAAYhB,EACZiB,+BAASf,EACTgB,iBAAUV,EACVW,sBAAYlB,GAjBJ,SAqBN,EAAKJ,kBAAkBpI,WAAW,sEAA4DgE,IAAI9G,GArB5F,2CA3IF,6EAkLd4M,cAlLc,uCAkLE,WAAOxB,EAAkBC,EAAoBC,EAAqBC,EAAmBC,EAAiBC,EAAiBC,EAAcC,EAAaC,EAAqBC,GAAvK,eAAAvJ,EAAA,6DAERtC,EAAO,CAEP8L,OAAQ,CACJA,OAAQN,EAAQO,WAChBC,aAAcN,EAAKK,WACnBE,QAASR,EAAQM,WACjBG,WAAKP,EAAII,YAEbI,SAAU,gCACVpF,cAAe,IAAI9D,KACnBmJ,SAAUR,EACVxE,MAAOgE,EACPiB,mBAAYhB,EACZiB,+BAASf,EACTgB,iBAAUV,EACVW,sBAAYlB,GAjBJ,SAqBN,EAAKJ,kBAAkBpI,WAAW,4EAAkEgE,IAAI9G,GArBlG,2CAlLF,6EAwNd6M,iBAxNc,uCAwNI,WAAOzB,EAAkBC,EAAoBC,EAAqBC,EAAmBC,EAAiBC,EAAiBC,EAAcC,EAAaC,EAAqBC,GAAvK,eAAAvJ,EAAA,6DAEVtC,EAAO,CAEP8L,OAAQ,CACJA,OAAQN,EAAQO,WAChBC,aAAcN,EAAKK,WACnBE,QAASR,EAAQM,WACjBG,WAAKP,EAAII,YAEbI,SAAU,6BACVpF,cAAe,IAAI9D,KACnBmJ,SAAUR,EACVxE,MAAOgE,EACPiB,mBAAYhB,EACZiB,+BAASf,EACTgB,iBAAUV,EACVW,sBAAYlB,GAjBF,SAqBR,EAAKJ,kBAAkBpI,WAAW,yEAA8DgE,IAAI9G,GArB5F,2CAxNJ,6EAuPd4H,YAvPc,uCAuPA,WAAOC,GAAP,iBAAAvF,EAAA,6DACNwF,GAAO,IAAI7E,MAAO8E,UADZ,SAES,EAAK1B,gBAAgBoB,IAAI,SAAWK,GAAME,IAAIH,GAFvD,cAENrF,EAFM,yBAGHA,EAAOiF,IAAIQ,kBAHR,2CAvPA,2DAiQd6E,gBAjQc,sBAiQI,4BAAAxK,EAAA,sEACyD,EAAK4I,kBAAkBpI,WAAW,gEAA6DzD,MADxJ,cACV0N,EADU,OAC+J5E,KAD/J,kBAEP4E,GAFO,2CAjQJ,KAyQdC,eAzQc,sBAyQG,4BAAA1K,EAAA,sEAC0D,EAAK4I,kBAAkBpI,WAAW,uEAA4DzD,MADxJ,cACT0N,EADS,OAC+J5E,KAD/J,kBAGN4E,GAHM,2CAzQH,KAoRdE,cApRc,sBAoRE,4BAAA3K,EAAA,sEAC2D,EAAK4I,kBAAkBpI,WAAW,+DAA0DzD,MADvJ,cACR0N,EADQ,OAC8J5E,KAD9J,kBAGL4E,GAHK,2CApRF,KA+RdG,eA/Rc,sBA+RG,4BAAA5K,EAAA,sEAC0D,EAAK4I,kBAAkBpI,WAAW,sEAA4DzD,MADxJ,cACT0N,EADS,OAC+J5E,KAD/J,kBAGN4E,GAHM,2CA/RH,KA0SdI,cA1Sc,sBA0SE,4BAAA7K,EAAA,sEAC2D,EAAK4I,kBAAkBpI,WAAW,4EAAkEzD,MAD/J,cACR0N,EADQ,OACsK5E,KADtK,kBAGL4E,GAHK,2CA1SF,KAoTdK,iBApTc,sBAoTK,4BAAA9K,EAAA,sEACwD,EAAK4I,kBAAkBpI,WAAW,yEAA8DzD,MADxJ,cACX0N,EADW,OAC+J5E,KAD/J,kBAGR4E,GAHQ,2CApTL,KAiUd3E,qBAAuB,SAAEpI,GAGrB,MAAO,CACHqN,aAAcrN,EAAKA,OAAQqM,iBAC3BiB,eAAgBtN,EAAKA,OAAQuM,eAC7BjE,kBAAmBtI,EAAKyH,MAvUlB,KAiVd8F,aAjVc,uCAiVC,WAAM/F,GAAN,eAAAlF,EAAA,sEACmBkF,EAAkBnI,MADrC,cACPmJ,EADO,OAC4CxI,OAAQoH,MADpD,SAELlI,IAASuJ,UAAUC,WAAWF,GAAUG,SAFnC,uBAGLnB,EAAkBmB,SAHb,2CAjVD,sDACVvI,KAAK8K,kBAAoBhM,IAASC,YAClCiB,KAAKiG,gBAAkBnH,IAASuJ,WCHlCG,EAAgBC,EAAQ,IAExBxF,EAAYC,MAAaC,MAAM,CACjC8E,MAAO/E,MACFE,IAAI,GACJC,IAAI,IACJC,SAAS,kCACd4H,YAAahI,MACRE,IAAI,GACJE,SAAS,kCACd6H,UAAWjI,MACNE,IAAI,GACJE,SAAS,kCACd+H,QAASnI,MACJE,IAAI,GACJE,SAAS,kCACdgI,KAAMpI,MACDE,IAAI,GACJE,SAAS,kCACdiI,IAAKrI,MACAE,IAAI,GACJE,SAAS,kCACd8H,QAASlI,MACJE,IAAI,GACJE,SAAS,kCACdkI,YAAatI,MACRE,IAAI,GACJE,SAAS,kCACdmI,YAAavI,MACRE,IAAI,GACJE,SAAS,kCACd5B,KAAMwB,MACDE,IAAI,GACJE,SAAS,mCACdmE,MAAOvE,MAAYI,SAAS,oCAsB1B8J,E,YACF,WAAYpP,GAAe,IAAD,8BACtB,4CAAMA,KAoBV+K,UAAY,SAACC,GACT,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACZJ,EAAQE,EAAOG,SAEnBH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,OA1BzB,EAAK/K,MAAQ,CACTwC,KAAM,CACFiB,KAAM,gBACNuG,MAAO,GACPmD,QAAS,GACTE,KAAM,GACNC,IAAK,GACL7B,aAAc,GACdjC,MAAO,KACP0D,UAAW,GACXD,YAAa,GACbO,YAAa,GACbJ,QAAS,GACTG,YAAa,KAfC,E,sEAgChB,IAAD,OACL,OACI,kBAACnL,EAAA,EAAD,KACI,yBAAKC,MAAO,CAAEqJ,cAAe,SAAUC,QAAS,KAC5C,kBAAC,IAAD,CAAMtJ,MAAO,CAAEuF,MAAO,OAASC,GAAG,aAAlC,eAWJ,kBAAC,IAAD,CACItC,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,uBAAAxB,EAAA,6DACNhC,QAAQC,IAAI,UACZuD,EAAQC,eAAc,GACtBzD,QAAQC,IAAIa,GAHN,SAKEqM,EAAK,IAAIxC,EALX,SAOiB,EAAK9B,UAAU/H,EAAOyG,OAPvC,cAOEqC,EAPF,OAQF5J,QAAQC,IAAI2J,GACRC,EAAUvB,EAAcsB,GAC5B5J,QAAQC,IAAI4J,GAVV,UAWmBsD,EAAG7F,YAAYuC,GAXlC,WAWIuD,EAXJ,OAYFpN,QAAQC,IAAImN,GACG,OAAXA,EAbF,uBAayB,IAAI9K,MAAM,2BAbnC,WAckB,kBAAhBxB,EAAOU,KAdT,kCAec2L,EAAGd,cAAce,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAf7N,QAeE7H,EAfF,kCAgByB,iBAAhB5C,EAAOU,KAhBhB,kCAiBc2L,EAAGf,aAAagB,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAjB5N,QAiBE7H,EAjBF,kCAkByB,mBAAhB5C,EAAOU,KAlBhB,kCAmBc2L,EAAGtC,eAAeuC,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAnB9N,QAmBE7H,EAnBF,kCAoByB,kBAAhB5C,EAAOU,KApBhB,kCAqBc2L,EAAGb,cAAcc,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aArB7N,QAqBE7H,EArBF,kCAsByB,kBAAhB5C,EAAOU,KAtBhB,kCAuBc2L,EAAGhB,cAAciB,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAvB7N,QAuBE7H,EAvBF,kCAwByB,qBAAhB5C,EAAOU,KAxBhB,kCAyBc2L,EAAGZ,iBAAiBa,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAzBhO,QAyBE7H,EAzBF,qCA0BW,IAAIpB,MAAM,cA1BrB,QA2BFtC,QAAQC,IAAIyD,GACZ,EAAK5F,MAAMgG,QAAQC,KAAK,KA5BtB,kDA8BF/D,QAAQC,IAAR,MA9BE,0DAAF,wDAiCR+D,iBAAkBjB,EAClBkB,OAAQ,gBAAG+F,EAAH,EAAGA,cAAelJ,EAAlB,EAAkBA,OAAlB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,KAAK,OAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAMmJ,MAAP,mBACA,kBAAC,IAAMjJ,QAAP,eAAe2F,GAAG,UAAa9F,EAA/B,CAAsCK,YAAY,uCAC9C,4BAAQgJ,MAAM,iBAAd,gBACA,4BAAQA,MAAM,gBAAd,kBACA,4BAAQA,MAAM,kBAAd,oBACA,4BAAQA,MAAM,iBAAd,kCACA,4BAAQA,MAAM,iBAAd,2BACA,4BAAQA,MAAM,oBAAd,gCAEHpJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,QAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,4BAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,yBAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,YAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,kCAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,UAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,YAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,UAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,aAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,OAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,kBAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,MAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,cAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,cAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACIC,aAAa,MACb/C,KAAK,QACD2C,EAHR,CAIIK,YAAY,cAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAK9E,kBAAC,IAAD,CAAO3D,KAAK,UACP,YAAgC,EAA7BoD,MAA6B,EAAtBE,KAAuB,IAAjBD,EAAgB,EAAhBA,KACb,OACI,kBAAC,IAAD,KACI,yBAAKO,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,WAEJ,yBAAKA,UAAU,eACX,2BACI5D,KAAK,QACLoJ,SAAQ,uCAAE,WAAOC,GAAP,eAAApI,EAAA,6DACNhC,QAAQC,IAAImK,EAAMC,cAAcC,MAAO,IACvCN,EAAc,QAASI,EAAMC,cAAcC,MAAO,IAC5C/J,EAAS,EAAKxC,MAAdwC,KAHA,SAIoB,EAAKsI,UAAUuB,EAAMC,cAAcC,MAAO,IAJ9D,OAIN/J,EAAKiJ,aAJC,OAKN,EAAKzJ,SAAS,CACVQ,SANE,2CAAF,sDASRiB,KAAK,OACL+I,OAAO,UACP5F,UAAU,sBAEd,2BAAOA,UAAU,qBACK,OAAjB7D,EAAOyG,MAAiBzG,EAAOyG,MAAMxG,KAAO,mBAIxDqD,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKhD,KAAjC,EAAK3G,MAAMwC,KAAKiJ,aACb,8BAEI,kBAACrJ,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,WAC3B,kBAACmK,EAAA,EAAD,CACIpK,MAAO,CACHqK,MAAO,QACPzJ,OAAQ,SAEZ0J,IAAK,EAAK3M,MAAMwC,KAAKiJ,gBAIrC,kBAAC5E,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQe,QAAS,kBAAM7F,QAAQC,IAAI,UAAUuB,KAAK,UAAlD,uB,GAlTPP,aA8TVI,cAAW6L,GCxXbO,EAGT,aAAe,IAAD,gCAFd7C,uBAEc,OAUd8C,kBAVc,uCAUM,WAAOzH,EAAgB/D,EAAgBgE,GAAvC,mBAAAlE,EAAA,sEAQ2E,EAAK4I,kBAC3FpI,WAAW,6BACX1D,IAAI,wCACJC,MAXW,YAQZ4O,EARY,QAaHC,OAbG,wBAcZ5N,QAAQC,IAAI,oBACR4N,EAAUF,EAASjO,QACnBoO,EAAgBD,EAAQE,MAIdhK,KAAK,CACf6C,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,IAvBA,UA0BN,EAAK0E,kBACNpI,WAAW,6BACX1D,IAAI,wCACJ2D,IAAI,CAAEsL,KAAMD,IA7BL,iDA+BN,EAAKlD,kBACNpI,WAAW,6BACX1D,IAAI,wCACJ2D,IAAI,CACDsL,KAAM,CACF,CACInH,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,MAvCZ,4CAVN,+DA8DdgI,cA9Dc,uCA8DE,WAAOjI,EAAgB/D,EAAgBgE,GAAvC,mBAAAlE,EAAA,sEAQ+E,EAAK4I,kBAC3FpI,WAAW,6BACX1D,IAAI,YACJC,MAXO,YAQR4O,EARQ,QAaCC,OAbD,wBAcJC,EAAUF,EAASjO,QACnBoO,EAAgBD,EAAQE,MAIdhK,KAAK,CACf6C,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,IAtBJ,SAyBF,EAAK0E,kBACNpI,WAAW,6BACX1D,IAAI,YACJ2D,IAAI,CAAEsL,KAAMD,IA5BT,gDA8BF,EAAKlD,kBACNpI,WAAW,6BACX1D,IAAI,YACJ2D,IAAI,CACDsL,KAAM,CACF,CACInH,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,MAtChB,4CA9DF,+DAiHdiI,cAjHc,uCAiHE,WAAOlI,EAAgB/D,EAAgBgE,GAAvC,mBAAAlE,EAAA,sEAQ0C,EAAK4I,kBACtDpI,WAAW,6BACX1D,IAAI,aACJC,MAXO,YAQR4O,EARQ,QAaCC,OAbD,wBAcJC,EAAUF,EAASjO,QACnBoO,EAAgBD,EAAQE,MAIdhK,KAAK,CACf6C,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,IAtBJ,SAyBF,EAAK0E,kBACNpI,WAAW,6BACX1D,IAAI,aACJ2D,IAAI,CAAEsL,KAAMD,IA5BT,gDA8BF,EAAKlD,kBACNpI,WAAW,6BACX1D,IAAI,aACJ2D,IAAI,CACDsL,KAAM,CACF,CACInH,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,MAtChB,4CAjHF,+DAoKdkI,cApKc,uCAoKE,WAAOnI,EAAgB/D,EAAgBgE,GAAvC,mBAAAlE,EAAA,sEAQ0C,EAAK4I,kBACtDpI,WAAW,6BACX1D,IAAI,qCACJC,MAXO,YAQR4O,EARQ,QAaCC,OAbD,wBAcJC,EAAUF,EAASjO,QACnBoO,EAAgBD,EAAQE,MAIdhK,KAAK,CACf6C,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,IAtBJ,SAyBF,EAAK0E,kBACNpI,WAAW,6BACX1D,IAAI,qCACJ2D,IAAI,CAAEsL,KAAMD,IA5BT,gDA8BF,EAAKlD,kBACNpI,WAAW,6BACX1D,IAAI,qCACJ2D,IAAI,CACDsL,KAAM,CACF,CACInH,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,MAtChB,4CApKF,+DAsNdmI,oBAtNc,uCAsNQ,WAAOpI,EAAgB/D,EAAgBgE,GAAvC,mBAAAlE,EAAA,sEAQoC,EAAK4I,kBACtDpI,WAAW,6BACX1D,IAAI,mCACJC,MAXa,YAQd4O,EARc,QAaLC,OAbK,wBAcVC,EAAUF,EAASjO,QACnBoO,EAAgBD,EAAQE,MAIdhK,KAAK,CACf6C,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,IAtBE,SAyBR,EAAK0E,kBACNpI,WAAW,6BACX1D,IAAI,mCACJ2D,IAAI,CAAEsL,KAAMD,IA5BH,gDA8BR,EAAKlD,kBACNpI,WAAW,6BACX1D,IAAI,mCACJ2D,IAAI,CACDsL,KAAM,CACF,CACInH,mBAAQX,EACR+H,MAAO9L,EACP+L,OAAQ/H,MAtCV,4CAtNR,0DACVpG,KAAK8K,kBAAoBhM,IAASC,aCHpCkE,EAAYC,MAAaC,MAAM,CACjC8E,MAAO/E,MACFE,IAAI,GACJC,IAAI,IACJC,SAAS,kCACdoF,YAAaxF,MACRE,IAAI,GACJC,IAAI,KACJC,SAAS,kCACdsF,SAAU1F,MACLE,IAAI,GACJC,IAAI,KACJC,SAAS,kCACd5B,KAAMwB,MACDE,IAAI,GACJE,SAAS,oCAcZkL,E,YACF,WAAYxQ,GAAe,IAAD,8BACtB,4CAAMA,KACDC,MAAQ,CACTwC,KAAM,CACFwH,MAAO,GACPS,YAAa,GACbE,SAAU,GACVlH,KAAM,mBAPQ,E,sEAYhB,IAAD,OACL,OACI,kBAACrB,EAAA,EAAD,KACI,kBAAC,IAAD,CACImD,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,iBAAAxB,EAAA,yDACNhC,QAAQC,IAAI,UACZuD,EAAQC,eAAc,GACtBzD,QAAQC,IAAIa,GAHN,SAKEyN,EAAM,IAAId,EAEM,mBAAhB3M,EAAOU,KAPT,iCAQc+M,EAAIb,kBAAkB5M,EAAOiH,MAAOjH,EAAO0H,YAAa1H,EAAO4H,UAR7E,OAQEhF,EARF,kCASyB,kBAAhB5C,EAAOU,KAThB,kCAUc+M,EAAIL,cAAcpN,EAAOiH,MAAOjH,EAAO0H,YAAa1H,EAAO4H,UAVzE,QAUEhF,EAVF,kCAWyB,kBAAhB5C,EAAOU,KAXhB,kCAYc+M,EAAIH,cAActN,EAAOiH,MAAOjH,EAAO0H,YAAa1H,EAAO4H,UAZzE,QAYEhF,EAZF,kCAayB,wBAAhB5C,EAAOU,KAbhB,kCAcc+M,EAAIF,oBAAoBvN,EAAOiH,MAAOjH,EAAO0H,YAAa1H,EAAO4H,UAd/E,QAcEhF,EAdF,kCAeyB,kBAAhB5C,EAAOU,KAfhB,kCAgBc+M,EAAIJ,cAAcrN,EAAOiH,MAAOjH,EAAO0H,YAAa1H,EAAO4H,UAhBzE,QAgBEhF,EAhBF,qCAiBW,IAAIpB,MAAM,cAjBrB,QAkBFtC,QAAQC,IAAIyD,GACZ,EAAK5F,MAAMgG,QAAQC,KAAK,KAnBtB,kDAqBF/D,QAAQC,IAAR,MArBE,0DAAF,wDAwBR+D,iBAAkBjB,EAClBkB,OAAQ,SAACC,GAAD,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACInD,KAAK,OAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAMmJ,MAAP,iBACA,kBAAC,IAAMjJ,QAAP,eAAe2F,GAAG,UAAa9F,EAA/B,CAAsCK,YAAY,uCAC9C,4BAAQgJ,MAAM,iBAAd,aACA,4BAAQA,MAAM,iBAAd,cACA,4BAAQA,MAAM,iBAAd,sCACA,4BAAQA,MAAM,kBAAd,0CACA,4BAAQA,MAAM,uBAAd,gDAEHpJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,QAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,wCAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,WAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CACI3D,KAAK,WAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,YAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAACE,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQe,QAAS,kBAAM7F,QAAQC,IAAI,UAAUuB,KAAK,UAAlD,uB,GApHVP,aAgIPI,cAAWiN,GClKbE,GAGT,aAAe,IAAD,gCAFd5D,uBAEc,OAUd6D,YAVc,uCAUA,WAAOC,GAAP,mBAAA1M,EAAA,sEACiF,EAAK4I,kBAC3FpI,WAAW,+CACX1D,IAAI,OACJC,MAJK,UACN4O,EADM,OAKV3N,QAAQC,IAAI0N,GACZ3N,QAAQC,IAAI0N,EAASC,SACjBD,EAASC,OAPH,wBAQFe,EAAYhB,EAASjO,QACfkP,YAAO7K,KAAK2K,GAThB,UAUA,EAAK9D,kBACNpI,WAAW,+CACX1D,IAAI,OACJ2D,IAAI,CAAEmM,YAAQD,EAAUC,cAbvB,uCAeFC,EAA0B,CAACH,GAfzB,UAgBA,EAAK9D,kBACNpI,WAAW,+CACX1D,IAAI,OACJ2D,IAAI,CAAEmM,YAAQC,IAnBb,4CAVA,sDACV/O,KAAK8K,kBAAoBhM,IAASC,aCEpCkE,GAAYC,MAAaC,MAAM,CACjCuF,YAAaxF,MACRE,IAAI,GACJC,IAAI,KACJC,SAAS,oCAYZ0L,G,YACF,WAAYhR,GAAe,IAAD,8BACtB,4CAAMA,KACDC,MAAQ,CACTgR,OAAQ,GACRxO,KAAM,CACFiI,YAAa,KALC,E,2MAUL5J,IAASC,YAAYC,IAAI,mDAAuCC,M,OAA7EiQ,E,OAEAD,EAASC,EAAKtP,OAAOkP,YACzB9O,KAAKC,SAAS,CAAEgP,OAAOA,I,gJAKvBjP,KAAKmP,c,+BAIC,IAAD,OACL,OACI,kBAAC9O,EAAA,EAAD,KACI,kBAAC,IAAD,CACImD,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,iBAAAxB,EAAA,6DACNhC,QAAQC,IAAI,UACZuD,EAAQC,eAAc,GACtBzD,QAAQC,IAAIa,GAHN,SAKEoO,EAAM,IAAIV,GALZ,SAMcU,EAAIT,YAAY3N,EAAO0H,aANrC,OAME9E,EANF,OAOF1D,QAAQC,IAAIyD,GACZ,EAAK5F,MAAMgG,QAAQC,KAAK,KARtB,kDAUF/D,QAAQC,IAAR,MAVE,0DAAF,wDAaR+D,iBAAkBjB,GAClBkB,OAAQ,SAACC,GAAD,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACInD,KAAK,cAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,WAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAACE,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQe,QAAS,kBAAM7F,QAAQC,IAAI,UAAUuB,KAAK,UAAlD,kBAOhB,yBAAKpB,MAAO,CAAEY,OAAQ,MACtB,4BACKlB,KAAK/B,MAAMgR,OAAOrO,KAAI,SAACC,GACpBX,QAAQC,IAAIU,GACZ,IAAIwO,EAAKxO,EACT,OACI,4BACKwO,OAKjB,yBAAK/O,MAAO,CAAEY,OAAQ,W,GAjFTC,aAuFdI,eAAWyN,I,SC1FpBM,IAbgB7G,EAAQ,I,YAc1B,WAAYzK,GAAe,IAAD,8BACtB,4CAAMA,KAgBV+K,UAAY,SAACC,GACT,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACZJ,EAAQE,EAAOG,SAEnBH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,OAxBH,EA4B1BuG,SA5B0B,sBA4Bf,wCAAArN,EAAA,6DACHsN,EAAM,IAAI3E,EADP,SAEc2E,EAAI1C,iBAFlB,cAEH2C,EAFG,gBAGaD,EAAI3C,gBAHjB,cAGH6C,EAHG,gBAIcF,EAAI9C,kBAJlB,cAIHiD,EAJG,iBAKiBH,EAAIzC,gBALrB,eAKH6C,EALG,iBAMaJ,EAAI5C,iBANjB,eAMHiD,EANG,iBAOiBL,EAAIxC,mBAPrB,QAOH8C,EAPG,OAQP,EAAK7P,SAAS,CAAEyP,UAASI,cAAaD,UAASD,cAAaD,WAAUF,aAR/D,4CA1BP,EAAKxR,MAAQ,CACTwR,SAAU,GACVC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,QAAS,GACTC,YAAa,IARK,E,2MAahB9P,KAAKuP,W,qIA0BL,IAAD,OACL,OACI,kBAAClP,EAAA,EAAD,KACI,kDACA,4BACKL,KAAK/B,MAAMyR,QAAQ9O,KAAI,SAACC,GACrB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAASpG,QAAO,sBAAE,gCAAA7D,EAAA,yDACvFsN,EAAM,IAAI3E,EACVjL,EAAO4P,EAAIxH,qBAAqBnH,GAChCuB,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EALuF,gCAMjFoN,EAAIrC,aAAavN,EAAKsI,mBAN2D,OAO3F,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAPgE,kDAY3G,gDACA,4BACKjQ,KAAK/B,MAAMwR,SAAS7O,KAAI,SAACC,GACtB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAASpG,QAAO,sBAAE,gCAAA7D,EAAA,yDACvFsN,EAAM,IAAI3E,EACVjL,EAAO4P,EAAIxH,qBAAqBnH,GAChCuB,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EALuF,gCAMjFoN,EAAIrC,aAAavN,EAAKsI,mBAN2D,OAO3F,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAPgE,kDAY3G,iDACA,4BACKjQ,KAAK/B,MAAM0R,SAAS/O,KAAI,SAACC,GACtB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAASpG,QAAO,sBAAE,gCAAA7D,EAAA,yDACvFsN,EAAM,IAAI3E,EACVjL,EAAO4P,EAAIxH,qBAAqBnH,GAChCuB,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EALuF,gCAMjFoN,EAAIrC,aAAavN,EAAKsI,mBAN2D,OAO3F,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAPgE,kDAY3G,wDACA,4BACKjQ,KAAK/B,MAAM4R,QAAQjP,KAAI,SAACC,GACrB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAASpG,QAAO,sBAAE,gCAAA7D,EAAA,yDACvFsN,EAAM,IAAI3E,EACVjL,EAAO4P,EAAIxH,qBAAqBnH,GAChCuB,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EALuF,gCAMjFoN,EAAIrC,aAAavN,EAAKsI,mBAN2D,OAO3F,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAPgE,kDAY3G,8DACA,4BACKjQ,KAAK/B,MAAM2R,YAAYhP,KAAI,SAACC,GACzB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAASpG,QAAO,sBAAE,gCAAA7D,EAAA,yDACvFsN,EAAM,IAAI3E,EACVjL,EAAO4P,EAAIxH,qBAAqBnH,GAChCuB,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EALuF,gCAMjFoN,EAAIrC,aAAavN,EAAKsI,mBAN2D,OAO3F,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAPgE,kDAY3G,4DACA,4BACKjQ,KAAK/B,MAAM6R,YAAYlP,KAAI,SAACC,GACzB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAASpG,QAAO,sBAAE,gCAAA7D,EAAA,yDACvFsN,EAAM,IAAI3E,EACVjL,EAAO4P,EAAIxH,qBAAqBnH,GAChCuB,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EALuF,gCAMjFoN,EAAIrC,aAAavN,EAAKsI,mBAN2D,OAO3F,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAPgE,uD,GA/H5F9O,cAiJhBI,eAAW+N,ICrJpBY,IARgBzH,EAAQ,I,YAS1B,WAAYzK,GAAe,IAAD,8BACtB,4CAAMA,KAYVuR,SAb0B,sBAaf,8BAAArN,EAAA,6DACHsN,EAAM,IAAIxJ,EADP,SAEUwJ,EAAI1H,cAFd,OAEHlI,EAFG,OAGP,EAAKK,SAAS,CAAEL,SAHT,2CAXP,EAAK3B,MAAQ,CACT2B,KAAM,IAHY,E,2MAQhBI,KAAKuP,W,qIAWL,IAAD,OACL,OACI,kBAAClP,EAAA,EAAD,KACI,wCACA,4BACKL,KAAK/B,MAAM2B,KAAKgB,KAAI,SAACC,GAClB,IAAI2O,EAAM,IAAIxJ,EACVpG,EAAO4P,EAAIxH,qBAAqBnH,GACpC,OACI,+CAAgBjB,EAAKqI,MAAO,KAA5B,WAA0CrI,EAAK4G,OAA/C,IAAuD,kBAAC,KAAD,CAAST,QAAO,sBAAE,4BAAA7D,EAAA,yDACjEE,EAAS2N,OAAOC,QAAQ,gBAC5B9P,QAAQC,IAAIiC,IACRA,EAHiE,gCAI3DoN,EAAIrH,eAAevI,EAAKsI,mBAJmC,OAKrE,EAAKlK,MAAMgG,QAAQiM,QAAQ,KAL0C,uD,GA7BxE9O,cA6CdI,eAAW2O,ICjDnB,SAAeC,GAAtB,mC,8CAAO,WAA2BC,GAA3B,SAAAlO,EAAA,sEACGpD,IAASuJ,UAAUC,WAAW8H,GAAK7H,SADtC,4C,sBCDP,IAAMC,GAAgBC,EAAQ,IAGxBxF,GAAYC,MAAaC,MAAM,CACjC8E,MAAO/E,MACFE,IAAI,GACJC,IAAI,IACJC,SAAS,kCACdoF,YAAaxF,MACRE,IAAI,GACJE,SAAS,kCACdqF,MAAOzF,MACFE,IAAI,GACJE,SAAS,kCACdsF,SAAU1F,MACLE,IAAI,GACJE,SAAS,kCACduF,OAAQ3F,MACHE,IAAI,GACJE,SAAS,kCACdmE,MAAOvE,MAAYmN,gBAmBjBC,G,YACF,WAAYtS,GAAe,IAAD,8BACtB,4CAAMA,KAwBVuR,SAzB0B,sBAyBf,8BAAArN,EAAA,6DACHsN,EAAM,IAAIxJ,EADP,SAEUwJ,EAAI1H,cAFd,OAEHlI,EAFG,OAGP,EAAKK,SAAS,CAAEL,SAHT,2CAzBe,EA+B1BmJ,UAAY,SAACC,GACT,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACZJ,EAAQE,EAAOG,SAEnBH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,OApCzB,EAAK/K,MAAQ,CACTsS,kBAAmB,KACnB3Q,KAAM,GACN4Q,eAAe,EACf/P,KAAM,CACFwH,MAAO,GACPS,YAAa,GACbC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRpB,MAAO,KACPiC,aAAc,KAbA,E,2MAoBhB1J,KAAKuP,W,qIAwBL,IAAD,OACL,OACI,kBAAClP,EAAA,EAAD,KACI,wCACA,wBAAIC,MAAO,CAAEqJ,cAAe,WACvB3J,KAAK/B,MAAM2B,KAAKgB,KAAI,SAACC,GAClB,IACIjB,GADM,IAAIoG,GACCgC,qBAAqBnH,GACpC,OACI,+CAAgBjB,EAAKqI,MAAO,KAA5B,WAA0CrI,EAAK4G,OAA/C,KAAyD,UACrD,kBAAC,KAAD,CAAQT,QAAO,sBAAE,gCAAA7D,EAAA,6DACbhC,QAAQC,IAAI,SADC,kBAGSP,EAAKsI,kBAAkBjJ,MAHhC,OAGLwR,EAHK,OAILC,EAAYD,EAAM7Q,OACtBM,QAAQC,IAAIuQ,GACRC,EAAY,CAEZ1I,MAAOyI,EAAU5J,iBAEjB4B,YAAagI,EAAU9J,qBAEvB+B,MAAO+H,EAAU7J,0BAEjB+B,SAAU8H,EAAU3J,UAEpB8B,OAAQ6H,EAAUzJ,MAClBQ,MAAO,KACPiC,aAAc,IAGlBxJ,QAAQC,IAAIsQ,EAAM7Q,QAElB,EAAKK,SAAS,CACVsQ,kBAAmB3Q,EAAKsI,kBACxBsI,eAAe,EACf/P,KAAMkQ,IA1BD,kDA6BTzQ,QAAQC,IAAR,MA7BS,iEAyC7BH,KAAK/B,MAAMuS,cACP,6BAEI,kBAAC,IAAD,CACIhN,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,uBAAAxB,EAAA,6DACNwB,EAAQC,eAAc,GADhB,kBAGuB,EAAK1F,MAAMsS,kBAAkBtR,MAHpD,UAGE2R,EAHF,OAIE/G,EAAO,IAAI7D,EACXgE,EAAS4G,EAAahR,OAAOoH,MAEZ,OAAjBhG,EAAOyG,MAPT,iBAQEuC,EAAS4G,EAAahR,OAAOoH,MAR/B,yCAYqB,EAAK+B,UAAU/H,EAAOyG,OAZ3C,eAYMqC,EAZN,OAaE5J,QAAQC,IAAI2J,GACRC,EAAUvB,GAAcsB,GAC5B5J,QAAQC,IAAI4J,GAfd,UAgBQoG,GAAYnG,GAhBpB,yBAiBiBH,EAAKrC,YAAYuC,GAjBlC,QAiBEC,EAjBF,sBAqBF9J,QAAQC,IAAI6J,GArBV,UAuBIH,EAAK1C,eACP6C,EAAQhJ,EAAOiH,MACfjH,EAAO2H,MAAO3H,EAAO0H,YAAa1H,EAAO6H,OAAQ7H,EAAO4H,SACxDgI,GA1BF,QA4BF,EAAK5S,MAAMgG,QAAQC,KAAK,KA5BtB,kDA8BF/D,QAAQC,IAAR,MA9BE,0DAAF,wDAiCR+D,iBAAkBjB,GAClBkB,OAAQ,gBAAG+F,EAAH,EAAGA,cAAelJ,EAAlB,EAAkBA,OAAlB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,KAAK,QAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,wCAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,QAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,eAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,WAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CACI3D,KAAK,WAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI2F,GAAG,WACH1F,aAAa,MACb2F,KAAK,IACL1I,KAAK,QACD2C,EALR,CAMIK,YAAY,YAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAACE,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,iBAC1B,kBAAC,IAAD,CACI9D,KAAK,SAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eAAe9C,KAAK,OAAO+C,aAAa,OAAUJ,EAAlD,CAAyDK,YAAY,WACpEJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAI9E,kBAAC,IAAD,CAAO3D,KAAK,UACP,YAAgC,EAA7BoD,MAA6B,EAAtBE,KAAuB,IAAjBD,EAAgB,EAAhBA,KACb,OACI,kBAAC,IAAD,KACI,yBAAKO,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,WAEJ,yBAAKA,UAAU,eACX,2BACI5D,KAAK,QACLoJ,SAAQ,uCAAE,WAAOC,GAAP,eAAApI,EAAA,6DACNhC,QAAQC,IAAImK,EAAMC,cAAcC,MAAO,IACvCN,EAAc,QAASI,EAAMC,cAAcC,MAAO,IAC5C/J,EAAS,EAAKxC,MAAdwC,KAHA,SAIoB,EAAKsI,UAAUuB,EAAMC,cAAcC,MAAO,IAJ9D,OAIN/J,EAAKiJ,aAJC,OAKN,EAAKzJ,SAAS,CACVQ,SANE,2CAAF,sDASRiB,KAAK,OACL+I,OAAO,UACP5F,UAAU,sBAEd,2BAAOA,UAAU,qBACK,OAAjB7D,EAAOyG,MAAiBzG,EAAOyG,MAAMxG,KAAO,mBAIxDqD,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,YAMpD,KAAjC,EAAK3G,MAAMwC,KAAKiJ,aACb,8BAEI,kBAACrJ,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,WAC3B,kBAACmK,EAAA,EAAD,CACIpK,MAAO,CACHqK,MAAO,QACPzJ,OAAQ,SAEZ0J,IAAK,EAAK3M,MAAMwC,KAAKiJ,gBAIrC,kBAAC5E,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQtD,KAAK,UAAb,WAEJ,yBAAKpB,MAAO,CAAEY,OAAQ,WAUtC,mC,GArRGC,aAgSZI,eAAW+O,ICvUpB9H,GAAgBC,EAAQ,IAGxBxF,GAAYC,MAAaC,MAAM,CACjC8E,MAAO/E,MACFE,IAAI,GACJC,IAAI,IACJC,SAAS,kCACd4H,YAAahI,MACRE,IAAI,GACJE,SAAS,kCACd6H,UAAWjI,MACNE,IAAI,GACJE,SAAS,kCACd+H,QAASnI,MACJE,IAAI,GACJE,SAAS,kCACdgI,KAAMpI,MACDE,IAAI,GACJE,SAAS,kCACdiI,IAAKrI,MACAE,IAAI,GACJE,SAAS,kCACd8H,QAASlI,MACJE,IAAI,GACJE,SAAS,kCACdkI,YAAatI,MACRE,IAAI,GACJE,SAAS,kCACdmI,YAAavI,MACRE,IAAI,GACJE,SAAS,kCACd5B,KAAMwB,MACDE,IAAI,GACJE,SAAS,mCACdmE,MAAOvE,MAAYI,SAAS,oCA+B1BuN,G,YACF,WAAY7S,GAAe,IAAD,8BACtB,4CAAMA,KAkCV+K,UAAY,SAACC,GACT,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACZJ,EAAQE,EAAOG,SAEnBH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcT,OA1CH,EA8C1BuG,SA9C0B,sBA8Cf,wCAAArN,EAAA,6DACHsN,EAAM,IAAI3E,EADP,SAEc2E,EAAI1C,iBAFlB,cAEH2C,EAFG,gBAGaD,EAAI3C,gBAHjB,cAGH6C,EAHG,gBAIcF,EAAI9C,kBAJlB,cAIHiD,EAJG,iBAKiBH,EAAIzC,gBALrB,eAKH6C,EALG,iBAMaJ,EAAI5C,iBANjB,eAMHiD,EANG,iBAOiBL,EAAIxC,mBAPrB,QAOH8C,EAPG,OAQP,EAAK7P,SAAS,CAAEyP,UAASI,cAAaD,UAASD,cAAaD,WAAUF,aAR/D,4CA5CP,EAAKxR,MAAQ,CACTsS,kBAAmB,KACnB3Q,KAAM,GACN6P,SAAU,GACVC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,QAAS,GACTC,YAAa,GACbU,eAAe,EACf/P,KAAM,CACFiB,KAAM,gBACNuG,MAAO,GACPmD,QAAS,GACTE,KAAM,GACNC,IAAK,GACL7B,aAAc,GACdjC,MAAO,KACP0D,UAAW,GACXD,YAAa,GACbO,YAAa,GACbJ,QAAS,GACTG,YAAa,KAxBC,E,2MA+BhBxL,KAAKuP,W,qIA4BL,IAAD,OACL,OACI,kBAAClP,EAAA,EAAD,KACI,yCACA,kDACA,4BACKL,KAAK/B,MAAMyR,QAAQ9O,KAAI,SAACC,GACrB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAAQpG,QAAO,sBAAE,4BAAA7D,EAAA,sDACtFsN,EAAM,IAAI3E,EACH2E,EAAIxH,qBAAqBnH,GACpC,EAAKZ,SAAS,CACVuQ,eAAe,IAJuE,kDAU1G,gDACA,4BACKxQ,KAAK/B,MAAMwR,SAAS7O,KAAI,SAACC,GACtB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAAQpG,QAAO,sBAAE,4BAAA7D,EAAA,sDACtFsN,EAAM,IAAI3E,EACH2E,EAAIxH,qBAAqBnH,GACpC,EAAKZ,SAAS,CACVuQ,eAAe,IAJuE,kDAU1G,iDACA,4BACKxQ,KAAK/B,MAAM0R,SAAS/O,KAAI,SAACC,GACtB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAAQpG,QAAO,sBAAE,4BAAA7D,EAAA,sDACtFsN,EAAM,IAAI3E,EACH2E,EAAIxH,qBAAqBnH,GACpC,EAAKZ,SAAS,CACVuQ,eAAe,IAJuE,kDAU1G,wDACA,4BACKxQ,KAAK/B,MAAM4R,QAAQjP,KAAI,SAACC,GACrB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAAQpG,QAAO,sBAAE,4BAAA7D,EAAA,sDACtFsN,EAAM,IAAI3E,EACH2E,EAAIxH,qBAAqBnH,GACpC,EAAKZ,SAAS,CACVuQ,eAAe,IAJuE,kDAU1G,8DACA,4BACKxQ,KAAK/B,MAAM2R,YAAYhP,KAAI,SAACC,GACzB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAAQpG,QAAO,sBAAE,4BAAA7D,EAAA,sDACtFsN,EAAM,IAAI3E,EACH2E,EAAIxH,qBAAqBnH,GACpC,EAAKZ,SAAS,CACVuQ,eAAe,IAJuE,kDAU1G,4DACA,4BACKxQ,KAAK/B,MAAM6R,YAAYlP,KAAI,SAACC,GACzB,OACI,kDAAmBA,EAAEjB,OAAQqM,iBAAa,KAA1C,WAAwDpL,EAAEjB,OAAQuM,eAAlE,IAA6E,kBAAC,KAAD,CAAQpG,QAAO,sBAAE,4BAAA7D,EAAA,sDAChF,IAAI2I,EACVjL,EAAOiB,EAAEjB,OACbM,QAAQC,IAAIP,GACI,CACZ8B,KAAM,mBACNuG,MAAO,GACPmD,QAAS,GACTE,KAAM,GACNC,IAAK,GACL7B,aAAc,GACdjC,MAAO,KACP0D,UAAW,GACXD,YAAa,GACbO,YAAa,GACbJ,QAAS,GACTG,YAAa,IAEjB,EAAKvL,SAAS,CACVuQ,eAAe,IAnBuE,kDA2BtGxQ,KAAK/B,MAAMuS,cACP,6BAEI,kBAAC,IAAD,CACIhN,cAAexD,KAAK/B,MAAMwC,KAC1BgD,SAAQ,uCAAE,WAAOzC,EAAQ0C,GAAf,uBAAAxB,EAAA,6DACNhC,QAAQC,IAAI,UACZuD,EAAQC,eAAc,GACtBzD,QAAQC,IAAIa,GAHN,SAKEqM,EAAK,IAAIxC,EALX,SAOiB,EAAK9B,UAAU/H,EAAOyG,OAPvC,cAOEqC,EAPF,OAQF5J,QAAQC,IAAI2J,GACRC,EAAUvB,GAAcsB,GAC5B5J,QAAQC,IAAI4J,GAVV,UAWmBsD,EAAG7F,YAAYuC,GAXlC,WAWIuD,EAXJ,OAYFpN,QAAQC,IAAImN,GACG,OAAXA,EAbF,uBAayB,IAAI9K,MAAM,2BAbnC,WAckB,kBAAhBxB,EAAOU,KAdT,kCAec2L,EAAGd,cAAce,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAf7N,QAeE7H,EAfF,kCAgByB,iBAAhB5C,EAAOU,KAhBhB,kCAiBc2L,EAAGf,aAAagB,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAjB5N,QAiBE7H,EAjBF,kCAkByB,mBAAhB5C,EAAOU,KAlBhB,kCAmBc2L,EAAGtC,eAAeuC,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAnB9N,QAmBE7H,EAnBF,kCAoByB,kBAAhB5C,EAAOU,KApBhB,kCAqBc2L,EAAGb,cAAcc,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aArB7N,QAqBE7H,EArBF,kCAsByB,kBAAhB5C,EAAOU,KAtBhB,kCAuBc2L,EAAGhB,cAAciB,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAvB7N,QAuBE7H,EAvBF,kCAwByB,qBAAhB5C,EAAOU,KAxBhB,kCAyBc2L,EAAGZ,iBAAiBa,EAAQtM,EAAOiH,MAAOjH,EAAOkK,YAAalK,EAAOmK,UAAWoC,SAASvM,EAAOoK,SAAUoC,WAAWxM,EAAOqK,SAAUmC,WAAWxM,EAAOsK,MAAOkC,WAAWxM,EAAOuK,KAAMvK,EAAOwK,YAAaxK,EAAOyK,aAzBhO,QAyBE7H,EAzBF,qCA0BW,IAAIpB,MAAM,cA1BrB,QA2BFtC,QAAQC,IAAIyD,GACZ,EAAK5F,MAAMgG,QAAQC,KAAK,KA5BtB,kDA8BF/D,QAAQC,IAAR,MA9BE,0DAAF,wDAiCR+D,iBAAkBjB,GAClBkB,OAAQ,gBAAG+F,EAAH,EAAGA,cAAelJ,EAAlB,EAAkBA,OAAlB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,KAAK,OAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAMmJ,MAAP,mBACA,kBAAC,IAAMjJ,QAAP,eAAe2F,GAAG,UAAa9F,EAA/B,CAAsCK,YAAY,uCAC9C,4BAAQgJ,MAAM,iBAAd,gBACA,4BAAQA,MAAM,gBAAd,kBACA,4BAAQA,MAAM,kBAAd,oBACA,4BAAQA,MAAM,iBAAd,kCACA,4BAAQA,MAAM,iBAAd,2BACA,4BAAQA,MAAM,oBAAd,gCAEHpJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,QAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,4BAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,yBAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,YAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,kCAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,UAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,YAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,UAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,aAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,OAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,kBAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,MAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,cAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,YAA4B,IAAzBE,EAAwB,EAAxBA,MAAaC,GAAW,EAAjBC,KAAiB,EAAXD,MACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACI9C,KAAK,OACL+C,aAAa,OACTJ,EAHR,CAIIK,YAAY,cAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKlF,kBAAC,IAAD,CACI3D,KAAK,cAELkD,OAAQ,gBAAGE,EAAH,EAAGA,MAAaC,GAAhB,EAAUC,KAAV,EAAgBD,MAAhB,OACJ,kBAAC,IAAD,KACI,kBAAC,IAAME,QAAP,eACIC,aAAa,MACb/C,KAAK,QACD2C,EAHR,CAIIK,YAAY,cAEfJ,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAK9E,kBAAC,IAAD,CAAO3D,KAAK,UACP,YAAgC,EAA7BoD,MAA6B,EAAtBE,KAAuB,IAAjBD,EAAgB,EAAhBA,KACb,OACI,kBAAC,IAAD,KACI,yBAAKO,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,WAEJ,yBAAKA,UAAU,eACX,2BACI5D,KAAK,QACLoJ,SAAQ,uCAAE,WAAOC,GAAP,eAAApI,EAAA,6DACNhC,QAAQC,IAAImK,EAAMC,cAAcC,MAAO,IACvCN,EAAc,QAASI,EAAMC,cAAcC,MAAO,IAC5C/J,EAAS,EAAKxC,MAAdwC,KAHA,SAIoB,EAAKsI,UAAUuB,EAAMC,cAAcC,MAAO,IAJ9D,OAIN/J,EAAKiJ,aAJC,OAKN,EAAKzJ,SAAS,CACVQ,SANE,2CAAF,sDASRiB,KAAK,OACL+I,OAAO,UACP5F,UAAU,sBAEd,2BAAOA,UAAU,qBACK,OAAjB7D,EAAOyG,MAAiBzG,EAAOyG,MAAMxG,KAAO,mBAIxDqD,EAAKK,SAAWL,EAAKM,OAAS,yBAAKC,UAAU,eAAeP,EAAKM,WAKhD,KAAjC,EAAK3G,MAAMwC,KAAKiJ,aACb,8BAEI,kBAACrJ,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,WAC3B,kBAACmK,EAAA,EAAD,CACIpK,MAAO,CACHqK,MAAO,QACPzJ,OAAQ,SAEZ0J,IAAK,EAAK3M,MAAMwC,KAAKiJ,gBAIrC,kBAAC5E,EAAA,EAAD,CAAKxE,MAAO,CAAEyE,eAAgB,WAC1B,kBAACC,EAAA,EAAD,CAAQe,QAAS,kBAAM7F,QAAQC,IAAI,UAAUuB,KAAK,UAAlD,mBAWpB,mC,GArbKP,aAgcdI,eAAWsP,IC7fbC,GAAb,iLACc,IAAD,OACL,OACI,kBAAC,IAAD,KACI,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOxJ,KAAK,SAASyJ,OAAK,EAACC,UAAWzN,IACtC,kBAAC,IAAD,CACI+D,KAAK,WACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAACC,EAAD,SAGf,kBAAC,IAAD,CACI5J,KAAK,WACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAACE,GAAD,SAGd,kBAAC,IAAD,CACG7J,KAAK,YACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAACG,GAAD,SAIf,kBAAC,IAAD,CACI9J,KAAK,OACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAAC,GAAD,SAGf,kBAAC,IAAD,CACI3J,KAAK,aACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAAC,EAAD,SAGf,kBAAC,IAAD,CACI3J,KAAK,aACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAAC,GAAD,SAGf,kBAAC,IAAD,CACI3J,KAAK,cACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAACI,GAAD,SAGf,kBAAC,IAAD,CACI/J,KAAK,OACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAAC,EAAD,SAGf,kBAAC,IAAD,CACI3J,KAAK,IACLyJ,OAAK,EACL5M,OAAQ,WACJ,MAAiC,KAA7B,EAAKnG,MAAMyC,KAAKC,SAAwB,kBAAC,IAAD,CAAUoF,GAAI,CAAEmL,SAAU,YAC/D,kBAAC,EAAD,eA7EnC,GAA4B9P,aAiGbC,gBAPS,SAACnD,GAErB,MAAO,CAAEwC,KADQxC,EAATwC,SAIe,SAACY,GAAD,OAAmBC,YAAmB,GAAID,KAEtDD,CAA6C0P,IC5G5DhS,IAASwS,cCViB,CACtBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBDInB,IAMIC,GAAgB,CAChBrR,SAAUmD,aAAamO,QAAQ,YAAcnO,aAAamO,QAAQ,YAAc,GAChFjO,aAP6C,KAAzCF,aAAamO,QAAQ,iBAAmE,OAAzCnO,aAAamO,QAAQ,gBAC7DC,KAAKC,MAAMrO,aAAamO,QAAQ,iBAC/B,IAiBHG,GAAQC,YAAYC,YAAgB,CAAE5R,KATxC,WAAgD,IAA/CxC,EAA8C,uDAAtC8T,GAAeO,EAAuB,uCACtD,OAAQA,EAAO5Q,MACX,IAAK,QACD,OAAgB4Q,EAAO3Q,QAC3B,QACI,OAAO1D,OEXJsU,GAZf,iLAIQ,OACI,kBAAC,IAAD,CAAUJ,MAAOA,IACb,kBAAC,GAAD,WANhB,GAAyBhR,aCOLqR,QACa,cAA7BzC,OAAO0C,SAASC,UAEiB,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MAAM,2D,OCVvCC,IAASzO,OAAO,kBAAC,GAAD,MAAS0O,SAASC,eAAe,SDyHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,kB","file":"static/js/main.6605beaa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { User } from '../reducer/Actions';\nimport firebase from 'firebase';\n\ninterface Props extends RouteComponentProps {\n    user: User;\n}\ninterface State {\n    besRehNumber: number,\n    DoğruBilinenYanlışlarNumber: number,\n    HakkımızdaNumber: number,\n    KiloAlmaNumber: number,\n    KiloVermeNumber: number,\n    SağlıklıYaşamNumber: number,\n    SoruCevapNumber: number,\n\n    ŞaşırtanBilgilerNumber: number,\n    BlogNumber: any,\n    TarifNumber: any,\n    tarifNames: Array<string>,\n    blogNames: Array<string>,\n}\n\nexport class HomePage extends Component<Props, State> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            besRehNumber: 0,\n            DoğruBilinenYanlışlarNumber: 0,\n            HakkımızdaNumber: 0,\n            KiloAlmaNumber: 0,\n            KiloVermeNumber: 0,\n            SağlıklıYaşamNumber: 0,\n            SoruCevapNumber: 0,\n\n            ŞaşırtanBilgilerNumber: 0,\n            BlogNumber: {},\n            TarifNumber: {},\n            tarifNames: [],\n            blogNames: [],\n\n        }\n\n    }\n\n\n    async getStatistics() {\n        let Blog = await firebase.firestore().doc(\"/Statistics/Blog\").get();\n        let Tarif = await firebase.firestore().doc(\"/Statistics/Tarif\").get();\n\n\n        let besReh = await firebase.firestore().doc(\"/Statistics/BeslenmeRehberi\").get();\n        let DoğruBilinenYanlışlar = await firebase.firestore().doc(\"/Statistics/DoğruBilinenYanlışlar\").get();\n        let Hakkımızda = await firebase.firestore().doc(\"/Statistics/Hakkımızda\").get();\n        let KiloAlma = await firebase.firestore().doc(\"/Statistics/KiloAlma\").get();\n        let KiloVerme = await firebase.firestore().doc(\"/Statistics/KiloVerme\").get();\n        let SağlıklıYaşam = await firebase.firestore().doc(\"/Statistics/SağlıklıYaşam\").get();\n        let SoruCevap = await firebase.firestore().doc(\"/Statistics/SoruCevap\").get();\n        let ŞaşırtanBilgiler = await firebase.firestore().doc(\"/Statistics/ŞaşırtanBilgiler\").get();\n\n\n        //@ts-ignore\n        let besRehNumber: any = besReh.data().reviewNumber;\n        //@ts-ignore\n        let DoğruBilinenYanlışlarNumber: any = DoğruBilinenYanlışlar.data().reviewNumber;\n        //@ts-ignore\n        let HakkımızdaNumber: any = Hakkımızda.data().reviewNumber;\n        //@ts-ignore\n        let KiloAlmaNumber: any = KiloAlma.data().reviewNumber;\n        //@ts-ignore\n        let KiloVermeNumber: any = KiloVerme.data().reviewNumber;\n        //@ts-ignore\n        let SağlıklıYaşamNumber: any = SağlıklıYaşam.data().reviewNumber;\n        //@ts-ignore\n        let SoruCevapNumber: any = SoruCevap.data().reviewNumber;\n        //@ts-ignore\n        let ŞaşırtanBilgilerNumber: any = ŞaşırtanBilgiler.data().reviewNumber;\n\n        //@ts-ignore\n        let BlogNumber: firebase.firestore.DocumentData = Blog.data();\n        //@ts-ignore\n        let TarifNumber: firebase.firestore.DocumentData = Tarif.data();\n\n        let tarifNames = Object.keys(TarifNumber);\n        let blogNames = Object.keys(BlogNumber);\n\n\n        this.setState({\n            besRehNumber,\n            DoğruBilinenYanlışlarNumber,\n            HakkımızdaNumber,\n            KiloAlmaNumber,\n            KiloVermeNumber,\n            SağlıklıYaşamNumber,\n            SoruCevapNumber,\n\n            ŞaşırtanBilgilerNumber,\n            BlogNumber,\n            TarifNumber,\n            tarifNames,\n            blogNames,\n        })\n        console.log(\"hey\" + this.state.blogNames);\n\n    }\n\n    componentDidMount() {\n        this.getStatistics();\n    }\n\n\n\n    render() {\n        return (\n            <Container>\n                <div style={{ textAlign: 'center', fontSize: '3rem' }}>Hoş geldin {this.props.user.username}</div>\n                <div style={{ textAlign: \"center\", fontSize: '2rem', margin: 20 }}> Yazılarımız ve Okunmaları</div>\n\n                <div style={{ fontSize: '2rem', margin: 20 }}> Blog</div>\n                <ul>\n                    {this.state.blogNames.map((i, index: any) => {\n                        let entries = Object.values(this.state.BlogNumber);\n                        let name = i;\n                        return (\n\n                            <li>\n                                {name}  :  {entries[index]}\n                            </li>\n                        )\n                    })}\n                </ul>\n\n\n                <div style={{ fontSize: '2rem', margin: 20 }}> Tarifler</div>\n                <ul>\n                    {this.state.tarifNames.map((i, index: any) => {\n                        let entries = Object.values(this.state.TarifNumber);\n                        let name = i;\n                        return (\n\n                            <li>\n                                {name}  :  {entries[index]}\n                            </li>\n                        )\n                    })}\n                </ul>\n\n                <div style={{ fontSize: '2rem', margin: 20 }}> Diğer İçeriklerimiz</div>\n\n                <ul>\n                    <li>\n                        Beslenme Rehberi: {this.state.besRehNumber}\n                    </li>\n                </ul>\n\n                <ul>\n                    <li>\n                        Hakkımızda: {this.state.HakkımızdaNumber}\n                    </li>\n                </ul>\n                <ul>\n                    <li>\n                        Soru Cevap: {this.state.SoruCevapNumber}\n                    </li>\n                </ul>\n                <div style={{ fontSize: '2rem', margin: 20 }}> SSS</div>\n                <ul>\n                    <li>\n                        ŞaşırtanBilgiler: {this.state.ŞaşırtanBilgilerNumber}\n                    </li>\n                </ul>\n                <ul>\n                    <li>\n                        DoğruBilinenYanlışlar: {this.state.DoğruBilinenYanlışlarNumber}\n                    </li>\n                </ul>\n                <ul>\n                    <li>\n                        Kilo Verme - SSS: {this.state.KiloVermeNumber}\n                    </li>\n                </ul>\n                <ul>\n                    <li>\n                        Kilo Alma - SSS: {this.state.KiloAlmaNumber}\n                    </li>\n                </ul>  <ul>\n                    <li>\n                        Sağlıklı Yaşam - SSS: {this.state.SağlıklıYaşamNumber}\n                    </li>\n                </ul>\n\n                <div style={{ height: 30 }} />\n\n            </Container>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(HomePage));\n","import firebase from 'firebase';\n\nexport interface User {\n    username: string;\n    firebaseuser: firebase.User | string;\n}\n\n/**\n * Set the user to the redux store\n * @param {User} key\n */\n\nexport const setUser = (key: User) => ({\n    type: 'LOGIN',\n    payload: key,\n});\n","import firebase from 'firebase';\n\n/**\n *  All Operations for Authentication: Login, SignUp, Reset Password\n */\n\nexport class FirebaseAuth {\n    authFirebase: firebase.auth.Auth;\n    firestoreFirebase: firebase.firestore.Firestore;\n\n    constructor() {\n        this.authFirebase = firebase.auth();\n        this.firestoreFirebase = firebase.firestore();\n    }\n    /**\n     * @param {string} email Email of the user.\n     * @param {string} password Password of the user.\n     * @returns {firebase.User} User info and all data required.\n     */\n\n    loginWithEmailAndPassword = async (email: string, password: string) => {\n        let answer = await this.authFirebase.signInWithEmailAndPassword(email, password);\n        return answer.user;\n    };\n\n    /**\n     * This function creates a new user.\n     * @param {string} email Email of the user.\n     * @param {string} password Password of the user.\n     * @returns {firebase.User} User info and all data required.\n     */\n\n    signUpWithEmailAndPasswod = async (email: string, password: string, name: string, surname: string) => {\n        /**\n         * In here, create a new user with email, password.\n         */\n        let answer = await this.authFirebase.createUserWithEmailAndPassword(email, password);\n        if (answer.user === null) {\n            throw new Error('User can not be signed up');\n        }\n        /**\n         * The new user when signed up, it must add users name and surname.\n         * Also, Document id is going to be the new user uid.\n         */\n\n        let uid = answer.user.uid;\n        await this.firestoreFirebase\n            .collection('/Diyetisyenler')\n            .doc(uid)\n            .set({\n                name: name,\n                surname: surname,\n                email: email,\n                registerDate: new Date(),\n            });\n\n        return answer.user;\n    };\n\n    /**\n     * When user forgot the password, this function send an email to his account to reset.\n     * @param {string} email email of the user\n     *\n     */\n    resetPasswordWithEmail = async (email: string) => {\n        await this.authFirebase.sendPasswordResetEmail(email);\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport { User, setUser } from '../reducer/Actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseAuth } from '../backend/FirebaseAuth';\n\nconst valSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n    password: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n});\n\ninterface Props extends RouteComponentProps {\n    setUser: typeof setUser;\n}\n\ninterface State {\n    user: {\n        username: string;\n        password: string;\n    };\n}\n\nclass LoginPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                username: '',\n                password: '',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        this.setState({\n                            user: {\n                                username: values.username,\n                                password: values.password,\n                            },\n                        });\n                        let auth = new FirebaseAuth();\n                        try {\n                            const res = await auth.loginWithEmailAndPassword(values.username, values.password);\n                            if (res === null) throw new Error('Not a valid user');\n                            localStorage.setItem('username', values.username);\n                            this.props.setUser({\n                                username: values.username,\n                                firebaseuser: res!,\n                            });\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"username\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control type=\"text\" autoComplete=\"off\" {...field} placeholder=\"Username\" />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"password\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control type=\"password\" autoComplete=\"off\" {...field} placeholder=\"Password\" />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Login</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators(\n        {\n            setUser,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(LoginPage));\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport { User, setUser } from '../../reducer/Actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\ninterface Props {\n    user: User;\n    setUser: typeof setUser;\n}\n\nexport class NavBar extends Component<Props> {\n    render() {\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"/\">Diyetin</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/\">\n                                Home\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/addblog\">\n                                Blog\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/addrecipe\">\n                                Tarif\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/faq\">\n                                SSS\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/qod\">\n                                Günün Sözleri\n                            </Link>\n                        </Nav.Link>\n                        {this.props.user.firebaseuser === null ? (\n                            <div />\n                        ) : (\n                            <Nav.Link>\n                                <Link\n                                    style={{ color: '#555' }}\n                                    to=\"/login\"\n                                    onClick={() => {\n                                        this.props.setUser({\n                                            username: '',\n                                            firebaseuser: '',\n                                        });\n                                        localStorage.setItem('username', '');\n                                        localStorage.setItem('firebaseuser', '');\n                                    }}\n                                >\n                                    Logout\n                                </Link>\n                            </Nav.Link>\n                        )}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators(\n        {\n            setUser,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import firebase, { firestore } from 'firebase';\n\n\ninterface details{\n    title: string,\n    author: string,\n    DocumentReference: firebase.firestore.DocumentReference,\n}\n\nexport class FirebaseBlogOperations {\n    authFirebase: firebase.auth.Auth;\n    firestoreFirebase: firebase.firestore.Firestore;\n    storageFirebase: firebase.storage.Storage;\n\n    constructor() {\n        this.firestoreFirebase = firebase.firestore();\n        this.authFirebase = firebase.auth();\n        this.storageFirebase = firebase.storage();\n    }\n\n    /**\n     *\n     * @param {string} imageUrl this is image url which is from image in Firebase Storage.\n     * @param {string} header  Max: 100 Characters - this is header of blog.\n     * @param {string} mainIdea mainIdea summarize what the blog is about.\n     * @param {string} blogText the text of blog.\n     * @param {string} references the sources for blog.\n     * @param {string} author  name & surname of blog writer\n     */\n    addNewBlog = async (header: string, references: string, imageUrl: string, mainIdea: string, blogText: string, author: string) => {\n        if (header.length > 100) {\n            throw new Error('Header should be less than 100 Characters');\n        }\n        try {\n            let ans = await this.firestoreFirebase.collection('/BeslenmeApp/AllDatas/Blog').add({\n                EklenmeTarihi: new Date(),\n                BlogYazısı: blogText,\n                AnaDüşünce: mainIdea,\n                Başlık: header,\n                Kaynaklar: references,\n                Resim: imageUrl,\n                Yazar: author,\n            });\n            return ans;\n        } catch (e) {\n            throw e;\n        }\n    };\n\n    /**\n     * @param {firestore.DocumentSnapShot} documentReference this is the reference of the blog post that would like to update\n     * @param {string} header  Max: 100 Characters - this is header of blog.\n     * @param {string} mainIdea mainIdea summarize what the blog is about.\n     * @param {string} blogText the text of blog.\n     * @param {string} references the sources for blog.\n     * @param {string} author  name & surname of blog writer\n     * @param {string} imageUrl this is image url which is from image in Firebase Storage.\n     */\n    updateBlogPost = async (\n        imageUrl: string,\n        header: string,\n        mainIdea: string,\n        blogText: string,\n        author: string,\n        references: string,\n        documentReference: firestore.DocumentSnapshot\n    ) => {\n        await this.firestoreFirebase.doc(documentReference.ref.path).update({\n            BlogYazısı: blogText,\n            AnaDüşünce: mainIdea,\n            Başlık: header,\n            Resim: imageUrl,\n            Kaynaklar: references,\n            Yazar: author,\n        });\n    };\n\n    /**\n     * @param {ArrayBuffer} image\n     * @returns {string} download url\n     */\n    uploadImage = async (image: ArrayBuffer) => {\n        let date = new Date().getTime()\n        let answer = await this.storageFirebase.ref('Blog/' + date).put(image);\n        return answer.ref.getDownloadURL();\n    }; \n\n    /**\n     * @returns {firestore.QueryDocumentSnapshot<firestore.DocumentData>[]}\n     */\n    getBlogDocs = async () => {\n        return (await this.firestoreFirebase.collection(\"/BeslenmeApp/AllDatas/Blog\").get()).docs;\n    }\n    /**\n     * @param {firebase.firestore.DocumentSnapshot} data this is the DocumentSnapshot for individual recipes.\n     * @returns {details} all necessary datas for deleting updating a document\n     */\n    getDetailsOfDocument = ( data: firebase.firestore.DocumentSnapshot) => {\n        \n\n        return {\n            title: data.data()!.Başlık,\n            author: data.data()!.Yazar,\n            DocumentReference: data.ref,\n        } as details;\n       \n\n    };\n\n    /**\n     * @param {firebase.firestore.DocumentReference} documentReference the reference of a specific document\n     */\n    deleteBlogPost = async(documentReference: firebase.firestore.DocumentReference)=>{\n        let urlImage: string = (await documentReference.get()).data()!.Resim;\n        await firebase.storage().refFromURL(urlImage).delete();\n        await documentReference.delete();\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseBlogOperations } from '../../backend/FirebaseBlog';\nconst toArrayBuffer = require('to-array-buffer');\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(80)\n        .required('Boş bırakılamaz'),\n    description: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    topic: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    resource: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    writer: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    image: Yup.mixed().required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    user: {\n        title: string;\n        description: string;\n        topic: string;\n        resource: string;\n        writer: string;\n        image: File | null;\n        imagepreview: string;\n    };\n}\n\nclass AddBlogPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                title: '',\n                description: '',\n                topic: '',\n                resource: '',\n                writer: '',\n                image: null,\n                imagepreview: '',\n            },\n        };\n    }\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    render() {\n        return (\n            <Container>\n                <div style={{flexDirection:\"column\",padding:30}}>\n                    <Link style={{ color: 'red' }} to=\"delblog\">\n                        Blogu Sil\n                </Link>\n                <div style={{height:30}}> </div>\n\n                    <Link style={{ color: 'blue' }} to=\"editblog\">\n                        Blog Düzenleme\n                </Link>\n                \n                </div>\n\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        try {\n                            let blog = new FirebaseBlogOperations();\n                            let base64 = await this.getBase64(values.image!);\n                            console.log(base64);\n                            let convert = toArrayBuffer(base64);\n                            console.log(convert);\n                            const resimg = await blog.uploadImage(convert);\n                            console.log(resimg);\n                            if (resimg === null) throw new Error('Error with image upload');\n                            const resadd = await blog.addNewBlog(\n                                values.title,\n                                values.resource,\n                                resimg,\n                                values.topic,\n                                values.description,\n                                values.writer\n                            );\n                            console.log(resadd);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={({ setFieldValue, values }) => (\n                        <Form>\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Başlık (Max 80 karakter)\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"topic\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"3\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Ana Fikir\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"8\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Field\n                                name=\"resource\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"2\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Kaynak\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'space-evenly' }}>\n                                <Field\n                                    name=\"writer\"\n                                    //@ts-ignore\n                                    render={({ field, form, meta }) => (\n                                        <BFormGroup>\n                                            <BForm.Control type=\"text\" autoComplete=\"off\" {...field} placeholder=\"Yazar\" />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    )}\n                                />\n                                <Field name=\"image\">\n                                    {({ field, form, meta }: any) => {\n                                        return (\n                                            <BFormGroup>\n                                                <div className=\"input-group\">\n                                                    <div className=\"input-group-prepend\">\n                                                        <span className=\"input-group-text\">Upload</span>\n                                                    </div>\n                                                    <div className=\"custom-file\">\n                                                        <input\n                                                            name=\"image\"\n                                                            onChange={async (event: React.ChangeEvent<HTMLInputElement>) => {\n                                                                console.log(event.currentTarget.files![0]);\n                                                                setFieldValue('image', event.currentTarget.files![0]);\n                                                                let { user } = this.state;\n                                                                user.imagepreview = await this.getBase64(event.currentTarget.files![0]);\n                                                                this.setState({\n                                                                    user,\n                                                                });\n                                                            }}\n                                                            type=\"file\"\n                                                            accept=\"image/*\"\n                                                            className=\"custom-file-input\"\n                                                        />\n                                                        <label className=\"custom-file-label\">\n                                                            {values.image !== null ? values.image.name : 'Fotoğraf'}\n                                                        </label>\n                                                    </div>\n                                                </div>\n                                                {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                            </BFormGroup>\n                                        );\n                                    }}\n                                </Field>\n                            </Row>\n                            {this.state.user.imagepreview === '' ? (\n                                <div />\n                            ) : (\n                                    <Container style={{ textAlign: 'center' }}>\n                                        <Image\n                                            style={{\n                                                width: '15rem',\n                                                height: '15rem',\n                                            }}\n                                            src={this.state.user.imagepreview}\n                                        />\n                                    </Container>\n                                )}\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Gönder</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(AddBlogPage);\n","import firebase from 'firebase';\n\nexport interface details{\n    nameOfRecipe: string,\n    personWhoCooks: string,\n    DocumentReference: firebase.firestore.DocumentReference,\n}\n\n\nexport class FirebaseRecipe {\n    firestoreInstance: firebase.firestore.Firestore;\n    storageFirebase: firebase.storage.Storage;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n        this.storageFirebase = firebase.storage();\n    }\n\n\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addHighCalorie = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"YüksekKalorili\",\n            EklenmeTarihi: new Date(),\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/YüksekKalorili\").add(data);\n\n\n    }\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addLowCalorie = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"DüşükKalorili\",\n            EklenmeTarihi: new Date(),\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DüşükKalorili\").add(data);\n\n\n    }\n\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addFitDesert = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"FitTatlılar\",\n            EklenmeTarihi: new Date(),\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/FitTatlılar\").add(data);\n\n\n    }\n\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addFastRecipe = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"HızlıTarifler\",\n            EklenmeTarihi: new Date(),\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/HızlıTarifler\").add(data);\n\n\n    }\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addLookingNew = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"DeğişiklikArayanlar\",\n            EklenmeTarihi: new Date(),\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DeğişiklikArayanlar\").add(data);\n\n\n    }\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addStudentRecipe= async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"ÖğrencilereÖzel\",\n            EklenmeTarihi: new Date(),\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/ÖğrencilereÖzel\").add(data);\n\n\n    }\n    \n\n     /**\n     * @param {ArrayBuffer} image\n     * @returns {string} download url\n     */\n    uploadImage = async (image: ArrayBuffer) => {\n        let date = new Date().getTime()\n        let answer = await this.storageFirebase.ref('Tarif/' + date).put(image);\n        return answer.ref.getDownloadURL();\n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getHighCalories = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/YüksekKalorili\").get()).docs;\n        return arrayOfDocs;\n    };\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getLowCalories = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DüşükKalorili\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getFitDeserts = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/FitTatlılar\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getFastRecipes = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/HızlıTarifler\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getLookingNew = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DeğişiklikArayanlar\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getStudentRecipe = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/ÖğrencilereÖzel\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n  \n\n    /**\n     * @param {firebase.firestore.DocumentSnapshot} data this is the DocumentSnapshot for individual recipes.\n     * @returns {details} all necessary datas for deleting updating a document\n     */\n    getDetailsOfDocument = ( data: firebase.firestore.DocumentSnapshot) => {\n        \n\n        return {\n            nameOfRecipe: data.data()!.Tarifinİsmi,\n            personWhoCooks: data.data()!.YapanKişi,\n            DocumentReference: data.ref,\n        } as details;\n       \n\n    };\n\n\n    /**\n     * @param {firebase.firestore.DocumentReference} documentReference the reference of a specific document\n     */\n    deleteRecipe = async(documentReference: firebase.firestore.DocumentReference)=>{\n        let urlImage: string = (await documentReference.get()).data()!.Resim;\n        await firebase.storage().refFromURL(urlImage).delete();\n        await documentReference.delete();\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe } from '../../backend/FirebaseRecipe';\nconst toArrayBuffer = require('to-array-buffer');\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(70)\n        .required('Boş bırakılamaz'),\n    ingredients: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    howToCook: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    protein: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    carb: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    fat: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    calorie: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    servingSize: Yup.string()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    nameSurname: Yup.string()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    type: Yup.string()\n        .min(1)\n        .required(\"Boş bıraklılamaz\"),\n    image: Yup.mixed().required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    user: {\n        title: string,\n        ingredients: string,\n        howToCook: string,\n        calorie: string,\n        protein: string,\n        carb: string,\n        type: string,\n        image: File | null,\n        fat: string,\n        servingSize: string,\n        imagepreview: string,\n        nameSurname: string\n    };\n}\n\nclass RecipePage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                type: 'addFastRecipe',\n                title: '',\n                calorie: '',\n                carb: '',\n                fat: '',\n                imagepreview: '',\n                image: null,\n                howToCook: '',\n                ingredients: '',\n                nameSurname: '',\n                protein: '',\n                servingSize: ''\n            },\n        };\n    }\n\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    render() {\n        return (\n            <Container>\n                <div style={{ flexDirection: \"column\", padding: 30 }}>\n                    <Link style={{ color: 'red' }} to=\"delrecipe\">\n                        Tarifi Sil\n                </Link>\n                    {/* <div style={{ height: 30 }}> </div>\n\n                    <Link style={{ color: 'blue' }} to=\"/editrecipe\">\n                        Tarifi Düzenle\n                </Link> */}\n\n                </div>\n\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        console.log('submit');\n                        actions.setSubmitting(false);\n                        console.log(values);\n                        try {\n                            let FR = new FirebaseRecipe();\n                            let res;\n                            let base64 = await this.getBase64(values.image!);\n                            console.log(base64);\n                            let convert = toArrayBuffer(base64);\n                            console.log(convert);\n                            const imgurl = await FR.uploadImage(convert);\n                            console.log(imgurl);\n                            if (imgurl === null) throw new Error('Error with image upload');\n                            if (values.type === 'addFastRecipe') {\n                                res = await FR.addFastRecipe(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addFitDesert') {\n                                res = await FR.addFitDesert(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addHighCalorie') {\n                                res = await FR.addHighCalorie(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addLookingNew') {\n                                res = await FR.addLookingNew(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addLowCalorie') {\n                                res = await FR.addLowCalorie(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addStudentRecipe') {\n                                res = await FR.addStudentRecipe(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else throw new Error('Wrong type');\n                            console.log(res);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={({ setFieldValue, values }) => (\n                        <Form>\n                            <Field\n                                name=\"type\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Label>Tarif Tipi</BForm.Label>\n                                            <BForm.Control as=\"select\" {...field} placeholder=\"Başlık (Max 80 karakter)\">\n                                                <option value=\"addFastRecipe\">Pratik Tarif</option>\n                                                <option value=\"addFitDesert\">Fit Tatlı</option>\n                                                <option value=\"addHighCalorie\">Yüksek Kalori</option>\n                                                <option value=\"addLookingNew\">Değişiklik Arayanlar</option>\n                                                <option value=\"addLowCalorie\">Düşük Kalori</option>\n                                                <option value=\"addStudentRecipe\">Öğrencilere Özel</option>\n                                            </BForm.Control>\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Yemeğin İsmi\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"ingredients\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"İçindekiler\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"howToCook\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Yapılışı\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"calorie\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Kalori\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"protein\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Protein\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"carb\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Karbonhidrat\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"fat\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Yağ\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"servingSize\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Porsiyon\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"nameSurname\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            autoComplete=\"off\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Ad Soyad\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n\n                            <Field name=\"image\">\n                                {({ field, form, meta }: any) => {\n                                    return (\n                                        <BFormGroup>\n                                            <div className=\"input-group\">\n                                                <div className=\"input-group-prepend\">\n                                                    <span className=\"input-group-text\">Upload</span>\n                                                </div>\n                                                <div className=\"custom-file\">\n                                                    <input\n                                                        name=\"image\"\n                                                        onChange={async (event: React.ChangeEvent<HTMLInputElement>) => {\n                                                            console.log(event.currentTarget.files![0]);\n                                                            setFieldValue('image', event.currentTarget.files![0]);\n                                                            let { user } = this.state;\n                                                            user.imagepreview = await this.getBase64(event.currentTarget.files![0]);\n                                                            this.setState({\n                                                                user,\n                                                            });\n                                                        }}\n                                                        type=\"file\"\n                                                        accept=\"image/*\"\n                                                        className=\"custom-file-input\"\n                                                    />\n                                                    <label className=\"custom-file-label\">\n                                                        {values.image !== null ? values.image.name : 'Fotoğraf'}\n                                                    </label>\n                                                </div>\n                                            </div>\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            </Field>\n                            {this.state.user.imagepreview === '' ? (\n                                <div />\n                            ) : (\n                                    <Container style={{ textAlign: 'center' }}>\n                                        <Image\n                                            style={{\n                                                width: '15rem',\n                                                height: '15rem',\n                                            }}\n                                            src={this.state.user.imagepreview}\n                                        />\n                                    </Container>\n                                )}\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button onClick={() => console.log('press')} type=\"submit\">\n                                    Gönder\n                                </Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(RecipePage);\n","import firebase from 'firebase';\n\ninterface FAQData {\n    Soru: Array<{\n        Başlık: string;\n        Cevap: string;\n        Kaynak: string;\n    }>;\n}\n\nexport class FirebaseFAQ {\n    firestoreInstance: firebase.firestore.Firestore;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n    }\n\n    /**\n     * Doğru Bilinen Yanlışlar\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddFalseKnownTrue = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Doğru Bilinen yanlışlar\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData> = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('DoğruBilinenYanlışlar')\n            .get();\n\n        if (snapshot.exists) {\n            console.log('There is the doc');\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('DoğruBilinenYanlışlar')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('DoğruBilinenYanlışlar')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n\n    /**\n     * Kilo Alma\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddGainWeight = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Kilo Alma\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData> = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('KiloAlma')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloAlma')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloAlma')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n\n    /**\n     * Kilo Verme\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddLoseWeight = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Kilo Verme\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentData = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('KiloVerme')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloVerme')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloVerme')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n\n    /**\n     * Sağlıklı Yaşam\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddHealthLife = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Sağlıklı Yaşam\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentData = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('SağlıklıYaşam')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('SağlıklıYaşam')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('SağlıklıYaşam')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n    /**\n     * Şaşırtan Bilgiler\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddInterestingFacts = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Sağlıklı Yaşam\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentData = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('ŞaşırtanBilgiler')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('ŞaşırtanBilgiler')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('ŞaşırtanBilgiler')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseFAQ } from '../backend/FirebaseFAQ';\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(80)\n        .required('Boş bırakılamaz'),\n    description: Yup.string()\n        .min(2)\n        .max(1000)\n        .required('Boş bırakılamaz'),\n    resource: Yup.string()\n        .min(2)\n        .max(300)\n        .required('Boş bırakılamaz'),\n    type: Yup.string()\n        .min(1)\n        .required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps {}\n\ninterface State {\n    user: {\n        title: string;\n        description: string;\n        resource: string;\n        type: string;\n    };\n}\n\nclass FAQPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                title: '',\n                description: '',\n                resource: '',\n                type: 'FalseKnownTrue',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        console.log('submit');\n                        actions.setSubmitting(false);\n                        console.log(values);\n                        try {\n                            let FAQ = new FirebaseFAQ();\n                            let res;\n                            if (values.type === 'FalseKnownTrue') {\n                                res = await FAQ.AddFalseKnownTrue(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddGainWeight') {\n                                res = await FAQ.AddGainWeight(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddHealthLife') {\n                                res = await FAQ.AddHealthLife(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddInterestingFacts') {\n                                res = await FAQ.AddInterestingFacts(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddLoseWeight') {\n                                res = await FAQ.AddLoseWeight(values.title, values.description, values.resource);\n                            } else throw new Error('Wrong type');\n                            console.log(res);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"type\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Label>SSS Tipi</BForm.Label>\n                                            <BForm.Control as=\"select\" {...field} placeholder=\"Başlık (Max 80 karakter)\">\n                                                <option value=\"AddGainWeight\">Kilo Alma</option>\n                                                <option value=\"AddLoseWeight\">Kilo Verme</option>\n                                                <option value=\"AddHealthLife\">Sağlıklı Yaşam</option>\n                                                <option value=\"FalseKnownTrue\">Doğru Bilinen Yanlışlar</option>\n                                                <option value=\"AddInterestingFacts\">Şaşırtıcı Bilgiler</option>\n                                            </BForm.Control>\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Başlık (Max 80 karakter)\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"8\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Field\n                                name=\"resource\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"2\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Kaynak\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button onClick={() => console.log('press')} type=\"submit\">\n                                    Gönder\n                                </Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(FAQPage);\n","import firebase from 'firebase';\n\ninterface QuoteData {\n    sözler: Array<string>;\n}\n\nexport class QuoteOfDay {\n    firestoreInstance: firebase.firestore.Firestore;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n    }\n\n    /**\n     * @param {string} newQuote this is input for adding new quote to database.\n     * newQuote can consists of person name.\n     * @example1 newQuote = \"Su akar yolunu bulur\"\n     * @example2 newQuote = \"Koşmayı bıraktığın gün, vardığın gün. - E. Soley\"\n     */\n    addNewQuote = async (newQuote: string) => {\n        let snapshot: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData> = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/GününSözü')\n            .doc('doc')\n            .get();\n        console.log(snapshot);\n        console.log(snapshot.exists);\n        if (snapshot.exists) {\n            let quoteData = snapshot.data() as QuoteData;\n            quoteData.sözler.push(newQuote);\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/GününSözü')\n                .doc('doc')\n                .set({ sözler: quoteData.sözler });\n        } else {\n            let arrayNew: Array<string> = [newQuote];\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/GününSözü')\n                .doc('doc')\n                .set({ sözler: arrayNew });\n        }\n        //       let quoteArray: Array<string> = quoteData;\n        //       quoteArray.push(newQuote);\n\n        //   await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/GününSözü\").doc(\"doc\").set({\"sözler\":quoteArray});\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { QuoteOfDay } from '../backend/FirebaseQuoteOfDay';\nimport firebase from 'firebase';\n\nconst valSchema = Yup.object().shape({\n    description: Yup.string()\n        .min(2)\n        .max(300)\n        .required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    quotes: Array<string>,\n    user: {\n        description: string;\n    };\n}\n\nclass QuoteOfDayPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            quotes: [],\n            user: {\n                description: '',\n            },\n        };\n    }\n    async getQuotes() {\n        let snap = await firebase.firestore().doc(\"/BeslenmeApp/AllDatas/GününSözü/doc\").get();\n        //@ts-ignore\n        let quotes = snap.data().sözler;\n        this.setState({ quotes:quotes });\n        \n    }\n\n    componentDidMount() {\n        this.getQuotes();\n    }\n\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        console.log('submit');\n                        actions.setSubmitting(false);\n                        console.log(values);\n                        try {\n                            let QOD = new QuoteOfDay();\n                            let res = await QOD.addNewQuote(values.description);\n                            console.log(res);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"8\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button onClick={() => console.log('press')} type=\"submit\">\n                                    Gönder\n                                </Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n                <div style={{ height: 30 }} />\n                <ul>\n                    {this.state.quotes.map((i) => {\n                        console.log(i);\n                        let qu = i;\n                        return (\n                            <li>\n                                {qu}\n                            </li>\n                        );\n                    })}\n                </ul>\n                <div style={{ height: 30 }} />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(QuoteOfDayPage);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { FaTrash, FaThumbsDown } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe, details } from '../../backend/FirebaseRecipe';\nconst toArrayBuffer = require('to-array-buffer');\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    dataFast: Array<firebase.firestore.DocumentSnapshot>,\n    dataFit: Array<firebase.firestore.DocumentSnapshot>,\n    dataHigh: Array<firebase.firestore.DocumentSnapshot>,\n    dataLooking: Array<firebase.firestore.DocumentSnapshot>,\n    dataLow: Array<firebase.firestore.DocumentSnapshot>,\n    dataStudent: Array<firebase.firestore.DocumentSnapshot>\n}\n\nclass DeleteRecipePage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            dataFast: [],\n            dataFit: [],\n            dataHigh: [],\n            dataLooking: [],\n            dataLow: [],\n            dataStudent: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.getItems()\n    }\n\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    getItems = async () => {\n        let rec = new FirebaseRecipe()\n        let dataFast = await rec.getFastRecipes()\n        let dataFit = await rec.getFitDeserts()\n        let dataHigh = await rec.getHighCalories()\n        let dataLooking = await rec.getLookingNew()\n        let dataLow = await rec.getLowCalories()\n        let dataStudent = await rec.getStudentRecipe()\n        this.setState({ dataFit, dataStudent, dataLow, dataLooking, dataHigh, dataFast });\n    }\n\n    render() {\n        return (\n            <Container>\n                <div>Fit Tatlılar</div>\n                <ul>\n                    {this.state.dataFit.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Pratik Tarifler</div>\n                <ul>\n                    {this.state.dataFast.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Yüksek Kalori</div>\n                <ul>\n                    {this.state.dataHigh.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Düşük Kalori</div>\n                <ul>\n                    {this.state.dataLow.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Değişklik Arayanlar</div>\n                <ul>\n                    {this.state.dataLooking.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Öğrencilere Özel</div>\n                <ul>\n                    {this.state.dataStudent.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n            </Container>\n        );\n    }\n}\n\n\nexport default withRouter(DeleteRecipePage);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { FaTrash, FaThumbsDown } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe, details } from '../../backend/FirebaseRecipe';\nimport { FirebaseBlogOperations } from '../../backend/FirebaseBlog';\nconst toArrayBuffer = require('to-array-buffer');\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    data: Array<firebase.firestore.DocumentSnapshot>,\n}\n\nclass DeleteBlogPost extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.getItems()\n    }\n  \n\n\n    getItems = async () => {\n        let rec = new FirebaseBlogOperations()\n        let data = await rec.getBlogDocs()\n        this.setState({ data });\n    }\n\n    render() {\n        return (\n            <Container>\n                <div>Bloglar</div>\n                <ul>\n                    {this.state.data.map((i) => {\n                        let rec = new FirebaseBlogOperations()\n                        let data = rec.getDetailsOfDocument(i);\n                        return (\n                            <li>Blog İsmi: {data.title}{'\\n'} Yazar: {data.author} <FaTrash onClick={async () => {\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteBlogPost(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n            </Container>\n        );\n    }\n}\n\n\nexport default withRouter(DeleteBlogPost);\n","import firebase from 'firebase';\n\nexport class Firestorage {\n    firestoreInstance: firebase.firestore.Firestore;\n    storage: firebase.storage.Storage;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n        this.storage = firebase.storage();\n    }\n\n    addPictureToStorage = () => { };\n}\n\n/**\n * @param {string} URL \n */\nexport async function deleteImage(url:string){\n    await firebase.storage().refFromURL(url).delete();\n}","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { FaTrash, FaThumbsDown, FaEdit } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe, details } from '../../backend/FirebaseRecipe';\nimport { FirebaseBlogOperations } from '../../backend/FirebaseBlog';\nimport { deleteImage } from '../../backend/FirebaseStorage';\n\nconst toArrayBuffer = require('to-array-buffer');\n\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(80)\n        .required('Boş bırakılamaz'),\n    description: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    topic: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    resource: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    writer: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    image: Yup.mixed().notRequired(),\n});\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    data: Array<firebase.firestore.DocumentSnapshot>,\n    showEditPanel: Boolean,\n    toEditDocumentRef: any,\n    user: {\n        title: string;\n        description: string;\n        topic: string;\n        resource: string;\n        writer: string;\n        image: File | null;\n        imagepreview: string;\n    };\n}\n\nclass EditBlogPost extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            toEditDocumentRef: null,\n            data: [],\n            showEditPanel: false,\n            user: {\n                title: '',\n                description: '',\n                topic: '',\n                resource: '',\n                writer: '',\n                image: null,\n                imagepreview: '',\n            }\n        };\n    }\n\n\n    async componentDidMount() {\n        await this.getItems()\n    }\n\n\n\n    getItems = async () => {\n        let rec = new FirebaseBlogOperations()\n        let data = await rec.getBlogDocs()\n        this.setState({ data });\n    }\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n\n\n    render() {\n        return (\n            <Container>\n                <div>Bloglar</div>\n                <ul style={{ flexDirection: \"column\" }}>\n                    {this.state.data.map((i) => {\n                        let rec = new FirebaseBlogOperations()\n                        let data = rec.getDetailsOfDocument(i);\n                        return (\n                            <li>Blog İsmi: {data.title}{'\\n'} Yazar: {data.author}  {\"----   \"}\n                                <FaEdit onClick={async () => {\n                                    console.log(\"Hello\");\n                                    try {\n                                        let local = await data.DocumentReference.get();\n                                        let localData = local.data();\n                                        console.log(localData);\n                                        let localUser = {\n                                            //@ts-ignore\n                                            title: localData.Başlık,\n                                            //@ts-ignore\n                                            description: localData.BlogYazısı,\n                                            //@ts-ignore\n                                            topic: localData.AnaDüşünce,\n                                            //@ts-ignore\n                                            resource: localData.Kaynaklar,\n                                            //@ts-ignore\n                                            writer: localData.Yazar,\n                                            image: null,\n                                            imagepreview: '',\n                                        }\n\n                                        console.log(local.data());\n\n                                        this.setState({\n                                            toEditDocumentRef: data.DocumentReference,\n                                            showEditPanel: true,\n                                            user: localUser,\n                                        });\n                                    } catch (error) {\n                                        console.log(error);\n                                    }\n\n                                }} />\n\n                            </li>\n                        );\n                    })}\n                </ul>\n\n\n                {\n                    this.state.showEditPanel ?\n                        <div>\n\n                            <Formik\n                                initialValues={this.state.user}\n                                onSubmit={async (values, actions) => {\n                                    actions.setSubmitting(false);\n                                    try {\n                                        let snapshotData = await this.state.toEditDocumentRef.get();\n                                        let blog = new FirebaseBlogOperations();\n                                        let resimg = snapshotData.data().Resim;\n\n                                        if (values.image === null) {\n                                            resimg = snapshotData.data().Resim;\n\n\n                                        } else {\n                                            let base64 = await this.getBase64(values.image!);\n                                            console.log(base64);\n                                            let convert = toArrayBuffer(base64);\n                                            console.log(convert);\n                                            await deleteImage(resimg);\n                                            resimg = await blog.uploadImage(convert);\n                                        }\n\n\n                                        console.log(resimg);\n\n                                        await blog.updateBlogPost(\n                                            resimg, values.title,\n                                            values.topic, values.description, values.writer, values.resource,\n                                            snapshotData\n                                        );\n                                        this.props.history.push('/');\n                                    } catch (e) {\n                                        console.log(e);\n                                    }\n                                }}\n                                validationSchema={valSchema}\n                                render={({ setFieldValue, values }) => (\n                                    <Form>\n                                        <Field\n                                            name=\"title\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Başlık (Max 80 karakter)\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"topic\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => (\n                                                <BFormGroup>\n                                                    <BForm.Control\n                                                        as=\"textarea\"\n                                                        autoComplete=\"off\"\n                                                        rows=\"3\"\n                                                        type=\"text\"\n                                                        {...field}\n                                                        placeholder=\"Ana Fikir\"\n                                                    />\n                                                    {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                </BFormGroup>\n                                            )}\n                                        />\n                                        <Field\n                                            name=\"description\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => (\n                                                <BFormGroup>\n                                                    <BForm.Control\n                                                        as=\"textarea\"\n                                                        autoComplete=\"off\"\n                                                        rows=\"8\"\n                                                        type=\"text\"\n                                                        {...field}\n                                                        placeholder=\"Detay\"\n                                                    />\n                                                    {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                </BFormGroup>\n                                            )}\n                                        />\n                                        <Field\n                                            name=\"resource\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => (\n                                                <BFormGroup>\n                                                    <BForm.Control\n                                                        as=\"textarea\"\n                                                        autoComplete=\"off\"\n                                                        rows=\"2\"\n                                                        type=\"text\"\n                                                        {...field}\n                                                        placeholder=\"Kaynak\"\n                                                    />\n                                                    {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                </BFormGroup>\n                                            )}\n                                        />\n                                        <Row style={{ justifyContent: 'space-evenly' }}>\n                                            <Field\n                                                name=\"writer\"\n                                                //@ts-ignore\n                                                render={({ field, form, meta }) => (\n                                                    <BFormGroup>\n                                                        <BForm.Control type=\"text\" autoComplete=\"off\" {...field} placeholder=\"Yazar\" />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                )}\n                                            />\n                                            <Field name=\"image\">\n                                                {({ field, form, meta }: any) => {\n                                                    return (\n                                                        <BFormGroup>\n                                                            <div className=\"input-group\">\n                                                                <div className=\"input-group-prepend\">\n                                                                    <span className=\"input-group-text\">Upload</span>\n                                                                </div>\n                                                                <div className=\"custom-file\">\n                                                                    <input\n                                                                        name=\"image\"\n                                                                        onChange={async (event: React.ChangeEvent<HTMLInputElement>) => {\n                                                                            console.log(event.currentTarget.files![0]);\n                                                                            setFieldValue('image', event.currentTarget.files![0]);\n                                                                            let { user } = this.state;\n                                                                            user.imagepreview = await this.getBase64(event.currentTarget.files![0]);\n                                                                            this.setState({\n                                                                                user,\n                                                                            });\n                                                                        }}\n                                                                        type=\"file\"\n                                                                        accept=\"image/*\"\n                                                                        className=\"custom-file-input\"\n                                                                    />\n                                                                    <label className=\"custom-file-label\">\n                                                                        {values.image !== null ? values.image.name : 'Fotoğraf'}\n                                                                    </label>\n                                                                </div>\n                                                            </div>\n                                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                        </BFormGroup>\n                                                    );\n                                                }}\n                                            </Field>\n                                        </Row>\n                                        {this.state.user.imagepreview === '' ? (\n                                            <div />\n                                        ) : (\n                                                <Container style={{ textAlign: 'center' }}>\n                                                    <Image\n                                                        style={{\n                                                            width: '15rem',\n                                                            height: '15rem',\n                                                        }}\n                                                        src={this.state.user.imagepreview}\n                                                    />\n                                                </Container>\n                                            )}\n                                        <Row style={{ justifyContent: 'center' }}>\n                                            <Button type=\"submit\">Kaydet</Button>\n                                        </Row>\n                                        <div style={{ height: 40 }} />\n                                    </Form>\n\n                                )}\n\n                            />\n\n\n                        </div>\n                        :\n                        <div />\n\n\n                }\n\n            </Container>\n        );\n    }\n}\n\n\nexport default withRouter(EditBlogPost);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\n\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { FaTrash, FaThumbsDown, FaEdit } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe, details } from '../../backend/FirebaseRecipe';\nimport { FirebaseBlogOperations } from '../../backend/FirebaseBlog';\nimport { deleteImage } from '../../backend/FirebaseStorage';\n\nconst toArrayBuffer = require('to-array-buffer');\n\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(70)\n        .required('Boş bırakılamaz'),\n    ingredients: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    howToCook: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    protein: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    carb: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    fat: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    calorie: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    servingSize: Yup.string()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    nameSurname: Yup.string()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    type: Yup.string()\n        .min(1)\n        .required(\"Boş bıraklılamaz\"),\n    image: Yup.mixed().required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    data: Array<firebase.firestore.DocumentSnapshot>,\n    showEditPanel: Boolean,\n    toEditDocumentRef: any,\n    dataFast: Array<firebase.firestore.DocumentSnapshot>,\n    dataFit: Array<firebase.firestore.DocumentSnapshot>,\n    dataHigh: Array<firebase.firestore.DocumentSnapshot>,\n    dataLooking: Array<firebase.firestore.DocumentSnapshot>,\n    dataLow: Array<firebase.firestore.DocumentSnapshot>,\n    dataStudent: Array<firebase.firestore.DocumentSnapshot>\n    user: {\n        title: string,\n        ingredients: string,\n        howToCook: string,\n        calorie: string,\n        protein: string,\n        carb: string,\n        type: string,\n        image: File | null,\n        fat: string,\n        servingSize: string,\n        imagepreview: string,\n        nameSurname: string\n    };\n}\n\nclass EditRecipePost extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            toEditDocumentRef: null,\n            data: [],\n            dataFast: [],\n            dataFit: [],\n            dataHigh: [],\n            dataLooking: [],\n            dataLow: [],\n            dataStudent: [],\n            showEditPanel: false,\n            user: {\n                type: 'addFastRecipe',\n                title: '',\n                calorie: '',\n                carb: '',\n                fat: '',\n                imagepreview: '',\n                image: null,\n                howToCook: '',\n                ingredients: '',\n                nameSurname: '',\n                protein: '',\n                servingSize: ''\n            },\n        };\n    }\n\n\n    async componentDidMount() {\n        await this.getItems()\n    }\n\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    getItems = async () => {\n        let rec = new FirebaseRecipe()\n        let dataFast = await rec.getFastRecipes()\n        let dataFit = await rec.getFitDeserts()\n        let dataHigh = await rec.getHighCalories()\n        let dataLooking = await rec.getLookingNew()\n        let dataLow = await rec.getLowCalories()\n        let dataStudent = await rec.getStudentRecipe()\n        this.setState({ dataFit, dataStudent, dataLow, dataLooking, dataHigh, dataFast });\n    }\n\n\n\n    render() {\n        return (\n            <Container>\n                <div>Tarifler</div>\n                <div>Fit Tatlılar</div>\n                <ul>\n                    {this.state.dataFit.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaEdit onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                this.setState({\n                                    showEditPanel: true\n                                })\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Pratik Tarifler</div>\n                <ul>\n                    {this.state.dataFast.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaEdit onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                this.setState({\n                                    showEditPanel: true\n                                })\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Yüksek Kalori</div>\n                <ul>\n                    {this.state.dataHigh.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaEdit onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                this.setState({\n                                    showEditPanel: true\n                                })\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Düşük Kalori</div>\n                <ul>\n                    {this.state.dataLow.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaEdit onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                this.setState({\n                                    showEditPanel: true\n                                })\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Değişklik Arayanlar</div>\n                <ul>\n                    {this.state.dataLooking.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaEdit onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                this.setState({\n                                    showEditPanel: true\n                                })\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Öğrencilere Özel</div>\n                <ul>\n                    {this.state.dataStudent.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaEdit onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = i.data();\n                                console.log(data);\n                                let localdata = {\n                                    type: 'addStudentRecipe',\n                                    title: '',\n                                    calorie: '',\n                                    carb: '',\n                                    fat: '',\n                                    imagepreview: '',\n                                    image: null,\n                                    howToCook: '',\n                                    ingredients: '',\n                                    nameSurname: '',\n                                    protein: '',\n                                    servingSize: ''\n                                };\n                                this.setState({\n                                    showEditPanel: true\n                                })\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n\n                {\n                    this.state.showEditPanel ?\n                        <div>\n\n                            <Formik\n                                initialValues={this.state.user}\n                                onSubmit={async (values, actions) => {\n                                    console.log('submit');\n                                    actions.setSubmitting(false);\n                                    console.log(values);\n                                    try {\n                                        let FR = new FirebaseRecipe();\n                                        let res;\n                                        let base64 = await this.getBase64(values.image!);\n                                        console.log(base64);\n                                        let convert = toArrayBuffer(base64);\n                                        console.log(convert);\n                                        const imgurl = await FR.uploadImage(convert);\n                                        console.log(imgurl);\n                                        if (imgurl === null) throw new Error('Error with image upload');\n                                        if (values.type === 'addFastRecipe') {\n                                            res = await FR.addFastRecipe(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                                        } else if (values.type === 'addFitDesert') {\n                                            res = await FR.addFitDesert(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                                        } else if (values.type === 'addHighCalorie') {\n                                            res = await FR.addHighCalorie(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                                        } else if (values.type === 'addLookingNew') {\n                                            res = await FR.addLookingNew(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                                        } else if (values.type === 'addLowCalorie') {\n                                            res = await FR.addLowCalorie(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                                        } else if (values.type === 'addStudentRecipe') {\n                                            res = await FR.addStudentRecipe(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                                        } else throw new Error('Wrong type');\n                                        console.log(res);\n                                        this.props.history.push('/');\n                                    } catch (e) {\n                                        console.log(e);\n                                    }\n                                }}\n                                validationSchema={valSchema}\n                                render={({ setFieldValue, values }) => (\n                                    <Form>\n                                        <Field\n                                            name=\"type\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Label>Tarif Tipi</BForm.Label>\n                                                        <BForm.Control as=\"select\" {...field} placeholder=\"Başlık (Max 80 karakter)\">\n                                                            <option value=\"addFastRecipe\">Pratik Tarif</option>\n                                                            <option value=\"addFitDesert\">Fit Tatlı</option>\n                                                            <option value=\"addHighCalorie\">Yüksek Kalori</option>\n                                                            <option value=\"addLookingNew\">Değişiklik Arayanlar</option>\n                                                            <option value=\"addLowCalorie\">Düşük Kalori</option>\n                                                            <option value=\"addStudentRecipe\">Öğrencilere Özel</option>\n                                                        </BForm.Control>\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"title\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Yemeğin İsmi\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"ingredients\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"İçindekiler\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"howToCook\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Yapılışı\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"calorie\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Kalori\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"protein\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Protein\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"carb\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Karbonhidrat\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"fat\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Yağ\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"servingSize\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <BForm.Control\n                                                            type=\"text\"\n                                                            autoComplete=\"off\"\n                                                            {...field}\n                                                            placeholder=\"Porsiyon\"\n                                                        />\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        />\n                                        <Field\n                                            name=\"nameSurname\"\n                                            //@ts-ignore\n                                            render={({ field, form, meta }) => (\n                                                <BFormGroup>\n                                                    <BForm.Control\n                                                        autoComplete=\"off\"\n                                                        type=\"text\"\n                                                        {...field}\n                                                        placeholder=\"Ad Soyad\"\n                                                    />\n                                                    {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                </BFormGroup>\n                                            )}\n                                        />\n\n                                        <Field name=\"image\">\n                                            {({ field, form, meta }: any) => {\n                                                return (\n                                                    <BFormGroup>\n                                                        <div className=\"input-group\">\n                                                            <div className=\"input-group-prepend\">\n                                                                <span className=\"input-group-text\">Upload</span>\n                                                            </div>\n                                                            <div className=\"custom-file\">\n                                                                <input\n                                                                    name=\"image\"\n                                                                    onChange={async (event: React.ChangeEvent<HTMLInputElement>) => {\n                                                                        console.log(event.currentTarget.files![0]);\n                                                                        setFieldValue('image', event.currentTarget.files![0]);\n                                                                        let { user } = this.state;\n                                                                        user.imagepreview = await this.getBase64(event.currentTarget.files![0]);\n                                                                        this.setState({\n                                                                            user,\n                                                                        });\n                                                                    }}\n                                                                    type=\"file\"\n                                                                    accept=\"image/*\"\n                                                                    className=\"custom-file-input\"\n                                                                />\n                                                                <label className=\"custom-file-label\">\n                                                                    {values.image !== null ? values.image.name : 'Fotoğraf'}\n                                                                </label>\n                                                            </div>\n                                                        </div>\n                                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                                    </BFormGroup>\n                                                );\n                                            }}\n                                        </Field>\n                                        {this.state.user.imagepreview === '' ? (\n                                            <div />\n                                        ) : (\n                                                <Container style={{ textAlign: 'center' }}>\n                                                    <Image\n                                                        style={{\n                                                            width: '15rem',\n                                                            height: '15rem',\n                                                        }}\n                                                        src={this.state.user.imagepreview}\n                                                    />\n                                                </Container>\n                                            )}\n                                        <Row style={{ justifyContent: 'center' }}>\n                                            <Button onClick={() => console.log('press')} type=\"submit\">\n                                                Gönder\n                                </Button>\n                                        </Row>\n                                    </Form>\n                                )}\n                            />\n\n\n                        </div>\n                        :\n                        <div />\n\n\n                }\n\n            </Container>\n        );\n    }\n}\n\n\nexport default withRouter(EditRecipePost);\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { User } from './reducer/Actions';\nimport HomePage from './screens/HomePage';\nimport LoginPage from './screens/LoginPage';\nimport NavBar from './components/NavBar/NavBar';\nimport BlogPage from './screens/Blog/BlogPage';\nimport RecipePage from './screens/Recipe/RecipePage';\nimport FAQPage from './screens/FAQPage';\nimport QODPage from './screens/QuotePage';\nimport DeleteRecipePage from './screens/Recipe/DeleteRecipePage';\nimport DeleteBlogPage from './screens/Blog/DeleteBlogPage';\nimport EditBlogPage from './screens/Blog/EditBlogPage';\nimport EditRecipePage from './screens/Recipe/EditRecipePage';\n\ninterface Props {\n    user: User;\n}\n\nexport class AppNav extends Component<Props> {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <NavBar />\n                    <Route path=\"/login\" exact component={LoginPage} />\n                    <Route\n                        path=\"/addblog\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <BlogPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/delblog\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <DeleteBlogPage />;\n                        }}\n                    />\n                     <Route\n                        path=\"/editblog\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <EditBlogPage />;\n                        }}\n                    />\n                     \n                    <Route\n                        path=\"/qod\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <QODPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/addrecipe\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <RecipePage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/delrecipe\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <DeleteRecipePage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/editrecipe\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <EditRecipePage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/faq\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <FAQPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <HomePage />;\n                        }}\n                    />\n                </div>\n            </Router>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppNav);\n","import { createStore, combineReducers } from 'redux';\nimport { User } from './Actions';\nimport firebase from 'firebase';\nimport {firebaseid}  from '../appid';\n\ninterface ActionUser {\n    payload: User;\n    type: string;\n}\n\nfirebase.initializeApp(firebaseid);\n\nlet firebaseuserfunc = () => {\n    if (localStorage.getItem('firebaseuser') !== '' && localStorage.getItem('firebaseuser') !== null)\n        return JSON.parse(localStorage.getItem('firebaseuser')!) as firebase.User;\n    else return '';\n};\n\nlet INITIAL_STATE = {\n    username: localStorage.getItem('username') ? localStorage.getItem('username') : '',\n    firebaseuser: firebaseuserfunc(),\n};\n\nlet user = (state = INITIAL_STATE, action: ActionUser) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return (state = action.payload);\n        default:\n            return state;\n    }\n};\n\nexport const store = createStore(combineReducers({ user }));\n","export const firebaseid = {\n    apiKey: 'AIzaSyBn4BzBjPoDRiRD0zOAA56Ge0pONpQ6d6c',\n    authDomain: 'beslenmeblog-c313a.firebaseapp.com',\n    databaseURL: 'https://beslenmeblog-c313a.firebaseio.com',\n    projectId: 'beslenmeblog-c313a',\n    storageBucket: 'beslenmeblog-c313a.appspot.com',\n    messagingSenderId: '1042722828462',\n    appId: '1:1042722828462:web:aa5fc3f5539343c1c47d3f',\n    measurementId: 'G-LMXB8WYNJD',\n};\n","import React, { Component } from 'react';\nimport AppNav from './AppNav';\nimport { Provider } from 'react-redux';\nimport { store } from './reducer/Reducers';\n\nexport class App extends Component {\n    \n\n    render() {\n        return (\n            <Provider store={store}>\n                <AppNav />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}