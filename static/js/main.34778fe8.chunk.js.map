{"version":3,"sources":["screens/HomePage.tsx","reducer/Actions.ts","backend/FirebaseAuth.ts","screens/LoginPage.tsx","components/NavBar/NavBar.tsx","backend/FirebaseBlog.ts","screens/BlogPage.tsx","backend/FirebaseRecipe.ts","screens/RecipePage.tsx","backend/FirebaseFAQ.ts","screens/FAQPage.tsx","backend/FirebaseQuoteOfDay.ts","screens/QuotePage.tsx","screens/DeleteRecipePage.tsx","screens/DeleteBlogPage.tsx","AppNav.tsx","reducer/Reducers.ts","appid.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","Container","style","textAlign","fontSize","this","props","user","username","Component","connect","state","dispatch","bindActionCreators","withRouter","setUser","key","type","payload","FirebaseAuth","authFirebase","firestoreFirebase","loginWithEmailAndPassword","email","password","a","signInWithEmailAndPassword","answer","signUpWithEmailAndPasswod","name","surname","createUserWithEmailAndPassword","Error","uid","collection","doc","set","registerDate","Date","resetPasswordWithEmail","sendPasswordResetEmail","firebase","auth","firestore","valSchema","Yup","shape","min","max","required","LoginPage","initialValues","onSubmit","values","actions","setSubmitting","setState","res","localStorage","setItem","firebaseuser","history","push","console","log","validationSchema","render","formikBag","field","meta","form","Control","autoComplete","placeholder","touched","error","className","Row","justifyContent","Button","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","color","to","onClick","FirebaseBlogOperations","storageFirebase","addNewBlog","header","references","imageUrl","mainIdea","blogText","author","length","add","EklenmeTarihi","BlogYazısı","AnaDüşünce","Başlık","Kaynaklar","Resim","Yazar","ans","updateBlogPost","documentReference","ref","path","update","uploadImage","image","date","getTime","put","getDownloadURL","getBlogDocs","get","docs","getDetailsOfDocument","data","title","DocumentReference","deleteBlogPost","urlImage","storage","refFromURL","delete","toArrayBuffer","require","description","topic","resource","writer","AddBlogPage","getBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","imagepreview","blog","base64","convert","resimg","resadd","setFieldValue","as","rows","onChange","event","currentTarget","files","accept","Image","width","height","src","FirebaseRecipe","firestoreInstance","addHighCalorie","imageURL","recipeName","ingredients","howToCook","calorie","protein","carb","fat","servingSize","nameSurname","Kalori","toString","Karbonhidrat","Protein","Yağ","Kategori","Porsiyon","Tarifinİsmi","Yapılışı","YapanKişi","İçindekiler","addLowCalorie","addFitDesert","addFastRecipe","addLookingNew","addStudentRecipe","getHighCalories","arrayOfDocs","getLowCalories","getFitDeserts","getFastRecipes","getLookingNew","getStudentRecipe","nameOfRecipe","personWhoCooks","deleteRecipe","RecipePage","FR","imgurl","parseInt","parseFloat","Label","value","FirebaseFAQ","AddFalseKnownTrue","snapshot","exists","allData","questionArray","Soru","Cevap","Kaynak","AddGainWeight","AddLoseWeight","AddHealthLife","AddInterestingFacts","FAQPage","FAQ","QuoteOfDay","addNewQuote","newQuote","quoteData","sözler","QuoteOfDayPage","QOD","DeleteRecipePage","getItems","rec","dataFast","dataFit","dataHigh","dataLooking","dataLow","dataStudent","map","i","window","confirm","replace","AppNav","exact","component","pathname","BlogPage","DeleteBlogPage","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","INITIAL_STATE","getItem","JSON","parse","store","createStore","combineReducers","action","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34778fe8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { User } from '../reducer/Actions';\n\ninterface Props extends RouteComponentProps {\n    user: User;\n}\n\nexport class HomePage extends Component<Props> {\n    render() {\n        return (\n            <Container>\n                <div style={{ textAlign: 'center', fontSize: '3rem' }}>Hoş geldin {this.props.user.username}</div>\n            </Container>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(HomePage));\n","import firebase from 'firebase';\n\nexport interface User {\n    username: string;\n    firebaseuser: firebase.User | string;\n}\n\n/**\n * Set the user to the redux store\n * @param {User} key\n */\n\nexport const setUser = (key: User) => ({\n    type: 'LOGIN',\n    payload: key,\n});\n","import firebase from 'firebase';\n\n/**\n *  All Operations for Authentication: Login, SignUp, Reset Password\n */\n\nexport class FirebaseAuth {\n    authFirebase: firebase.auth.Auth;\n    firestoreFirebase: firebase.firestore.Firestore;\n\n    constructor() {\n        this.authFirebase = firebase.auth();\n        this.firestoreFirebase = firebase.firestore();\n    }\n    /**\n     * @param {string} email Email of the user.\n     * @param {string} password Password of the user.\n     * @returns {firebase.User} User info and all data required.\n     */\n\n    loginWithEmailAndPassword = async (email: string, password: string) => {\n        let answer = await this.authFirebase.signInWithEmailAndPassword(email, password);\n        return answer.user;\n    };\n\n    /**\n     * This function creates a new user.\n     * @param {string} email Email of the user.\n     * @param {string} password Password of the user.\n     * @returns {firebase.User} User info and all data required.\n     */\n\n    signUpWithEmailAndPasswod = async (email: string, password: string, name: string, surname: string) => {\n        /**\n         * In here, create a new user with email, password.\n         */\n        let answer = await this.authFirebase.createUserWithEmailAndPassword(email, password);\n        if (answer.user === null) {\n            throw new Error('User can not be signed up');\n        }\n        /**\n         * The new user when signed up, it must add users name and surname.\n         * Also, Document id is going to be the new user uid.\n         */\n\n        let uid = answer.user.uid;\n        await this.firestoreFirebase\n            .collection('/Diyetisyenler')\n            .doc(uid)\n            .set({\n                name: name,\n                surname: surname,\n                email: email,\n                registerDate: new Date(),\n            });\n\n        return answer.user;\n    };\n\n    /**\n     * When user forgot the password, this function send an email to his account to reset.\n     * @param {string} email email of the user\n     *\n     */\n    resetPasswordWithEmail = async (email: string) => {\n        await this.authFirebase.sendPasswordResetEmail(email);\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport { User, setUser } from '../reducer/Actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseAuth } from '../backend/FirebaseAuth';\n\nconst valSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n    password: Yup.string()\n        .min(2)\n        .max(100)\n        .required('required'),\n});\n\ninterface Props extends RouteComponentProps {\n    setUser: typeof setUser;\n}\n\ninterface State {\n    user: {\n        username: string;\n        password: string;\n    };\n}\n\nclass LoginPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                username: '',\n                password: '',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        this.setState({\n                            user: {\n                                username: values.username,\n                                password: values.password,\n                            },\n                        });\n                        let auth = new FirebaseAuth();\n                        try {\n                            const res = await auth.loginWithEmailAndPassword(values.username, values.password);\n                            if (res === null) throw new Error('Not a valid user');\n                            localStorage.setItem('username', values.username);\n                            this.props.setUser({\n                                username: values.username,\n                                firebaseuser: res!,\n                            });\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"username\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control type=\"text\" autoComplete=\"off\" {...field} placeholder=\"Username\" />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"password\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control type=\"password\" autoComplete=\"off\" {...field} placeholder=\"Password\" />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Login</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators(\n        {\n            setUser,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(LoginPage));\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport { User, setUser } from '../../reducer/Actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\ninterface Props {\n    user: User;\n    setUser: typeof setUser;\n}\n\nexport class NavBar extends Component<Props> {\n    render() {\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"/\">Diyetin</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/\">\n                                Home\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/addblog\">\n                                Blog\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/addrecipe\">\n                                Tarif\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/faq\">\n                                SSS\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link>\n                            <Link style={{ color: '#555' }} to=\"/qod\">\n                                Günün Sözleri\n                            </Link>\n                        </Nav.Link>\n                        {this.props.user.firebaseuser === null ? (\n                            <div />\n                        ) : (\n                            <Nav.Link>\n                                <Link\n                                    style={{ color: '#555' }}\n                                    to=\"/login\"\n                                    onClick={() => {\n                                        this.props.setUser({\n                                            username: '',\n                                            firebaseuser: '',\n                                        });\n                                        localStorage.setItem('username', '');\n                                        localStorage.setItem('firebaseuser', '');\n                                    }}\n                                >\n                                    Logout\n                                </Link>\n                            </Nav.Link>\n                        )}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators(\n        {\n            setUser,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\n","import firebase, { firestore } from 'firebase';\n\n\ninterface details{\n    title: string,\n    author: string,\n    DocumentReference: firebase.firestore.DocumentReference,\n}\n\nexport class FirebaseBlogOperations {\n    authFirebase: firebase.auth.Auth;\n    firestoreFirebase: firebase.firestore.Firestore;\n    storageFirebase: firebase.storage.Storage;\n\n    constructor() {\n        this.firestoreFirebase = firebase.firestore();\n        this.authFirebase = firebase.auth();\n        this.storageFirebase = firebase.storage();\n    }\n\n    /**\n     *\n     * @param {string} imageUrl this is image url which is from image in Firebase Storage.\n     * @param {string} header  Max: 100 Characters - this is header of blog.\n     * @param {string} mainIdea mainIdea summarize what the blog is about.\n     * @param {string} blogText the text of blog.\n     * @param {string} references the sources for blog.\n     * @param {string} author  name & surname of blog writer\n     */\n    addNewBlog = async (header: string, references: string, imageUrl: string, mainIdea: string, blogText: string, author: string) => {\n        if (header.length > 100) {\n            throw new Error('Header should be less than 100 Characters');\n        }\n        try {\n            let ans = await this.firestoreFirebase.collection('/BeslenmeApp/AllDatas/Blog').add({\n                EklenmeTarihi: new Date(),\n                BlogYazısı: blogText,\n                AnaDüşünce: mainIdea,\n                Başlık: header,\n                Kaynaklar: references,\n                Resim: imageUrl,\n                Yazar: author,\n            });\n            return ans;\n        } catch (e) {\n            throw e;\n        }\n    };\n\n    /**\n     * @param {firestore.DocumentSnapShot} documentReference this is the reference of the blog post that would like to update\n     * @param {string} header  Max: 100 Characters - this is header of blog.\n     * @param {string} mainIdea mainIdea summarize what the blog is about.\n     * @param {string} blogText the text of blog.\n     * @param {string} references the sources for blog.\n     * @param {string} author  name & surname of blog writer\n     * @param {string} imageUrl this is image url which is from image in Firebase Storage.\n     */\n    updateBlogPost = async (\n        imageUrl: string,\n        header: string,\n        mainIdea: string,\n        blogText: string,\n        author: string,\n        references: string,\n        documentReference: firestore.DocumentSnapshot\n    ) => {\n        await this.firestoreFirebase.doc(documentReference.ref.path).update({\n            BlogYazısı: blogText,\n            AnaDüşünce: mainIdea,\n            Başlık: header,\n            Resim: imageUrl,\n            Kaynaklar: references,\n            Yazar: author,\n        });\n    };\n\n    /**\n     * @param {ArrayBuffer} image\n     * @returns {string} download url\n     */\n    uploadImage = async (image: ArrayBuffer) => {\n        let date = new Date().getTime()\n        let answer = await this.storageFirebase.ref('Blog/' + date).put(image);\n        return answer.ref.getDownloadURL();\n    }; \n\n    /**\n     * @returns {firestore.QueryDocumentSnapshot<firestore.DocumentData>[]}\n     */\n    getBlogDocs = async () => {\n        return (await this.firestoreFirebase.collection(\"/BeslenmeApp/AllDatas/Blog\").get()).docs;\n    }\n    /**\n     * @param {firebase.firestore.DocumentSnapshot} data this is the DocumentSnapshot for individual recipes.\n     * @returns {details} all necessary datas for deleting updating a document\n     */\n    getDetailsOfDocument = ( data: firebase.firestore.DocumentSnapshot) => {\n        \n\n        return {\n            title: data.data()!.Başlık,\n            author: data.data()!.Yazar,\n            DocumentReference: data.ref,\n        } as details;\n       \n\n    };\n\n    /**\n     * @param {firebase.firestore.DocumentReference} documentReference the reference of a specific document\n     */\n    deleteBlogPost = async(documentReference: firebase.firestore.DocumentReference)=>{\n        let urlImage: string = (await documentReference.get()).data()!.Resim;\n        await firebase.storage().refFromURL(urlImage).delete();\n        await documentReference.delete();\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseBlogOperations } from '../backend/FirebaseBlog';\nconst toArrayBuffer = require('to-array-buffer');\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(80)\n        .required('Boş bırakılamaz'),\n    description: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    topic: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    resource: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    writer: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    image: Yup.mixed().required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps {}\n\ninterface State {\n    user: {\n        title: string;\n        description: string;\n        topic: string;\n        resource: string;\n        writer: string;\n        image: File | null;\n        imagepreview: string;\n    };\n}\n\nclass AddBlogPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                title: '',\n                description: '',\n                topic: '',\n                resource: '',\n                writer: '',\n                image: null,\n                imagepreview: '',\n            },\n        };\n    }\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function(resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function() {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    render() {\n        return (\n            <Container>\n                <Link style={{ color: 'blue' }} to=\"delblog\">\n                    Blogu Sil\n                </Link>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        actions.setSubmitting(false);\n                        try {\n                            let blog = new FirebaseBlogOperations();\n                            let base64 = await this.getBase64(values.image!);\n                            console.log(base64);\n                            let convert = toArrayBuffer(base64);\n                            console.log(convert);\n                            const resimg = await blog.uploadImage(convert);\n                            console.log(resimg);\n                            if (resimg === null) throw new Error('Error with image upload');\n                            const resadd = await blog.addNewBlog(\n                                values.title,\n                                values.resource,\n                                resimg,\n                                values.topic,\n                                values.description,\n                                values.writer\n                            );\n                            console.log(resadd);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={({ setFieldValue, values }) => (\n                        <Form>\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Başlık (Max 80 karakter)\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"topic\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"3\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Ana Fikir\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"8\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Field\n                                name=\"resource\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"2\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Kaynak\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'space-evenly' }}>\n                                <Field\n                                    name=\"writer\"\n                                    //@ts-ignore\n                                    render={({ field, form, meta }) => (\n                                        <BFormGroup>\n                                            <BForm.Control type=\"text\" autoComplete=\"off\" {...field} placeholder=\"Yazar\" />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    )}\n                                />\n                                <Field name=\"image\">\n                                    {({ field, form, meta }: any) => {\n                                        return (\n                                            <BFormGroup>\n                                                <div className=\"input-group\">\n                                                    <div className=\"input-group-prepend\">\n                                                        <span className=\"input-group-text\">Upload</span>\n                                                    </div>\n                                                    <div className=\"custom-file\">\n                                                        <input\n                                                            name=\"image\"\n                                                            onChange={async (event: React.ChangeEvent<HTMLInputElement>) => {\n                                                                console.log(event.currentTarget.files![0]);\n                                                                setFieldValue('image', event.currentTarget.files![0]);\n                                                                let { user } = this.state;\n                                                                user.imagepreview = await this.getBase64(event.currentTarget.files![0]);\n                                                                this.setState({\n                                                                    user,\n                                                                });\n                                                            }}\n                                                            type=\"file\"\n                                                            accept=\"image/*\"\n                                                            className=\"custom-file-input\"\n                                                        />\n                                                        <label className=\"custom-file-label\">\n                                                            {values.image !== null ? values.image.name : 'Fotoğraf'}\n                                                        </label>\n                                                    </div>\n                                                </div>\n                                                {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                            </BFormGroup>\n                                        );\n                                    }}\n                                </Field>\n                            </Row>\n                            {this.state.user.imagepreview === '' ? (\n                                <div />\n                            ) : (\n                                <Container style={{ textAlign: 'center' }}>\n                                    <Image\n                                        style={{\n                                            width: '15rem',\n                                            height: '15rem',\n                                        }}\n                                        src={this.state.user.imagepreview}\n                                    />\n                                </Container>\n                            )}\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button type=\"submit\">Gönder</Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(AddBlogPage);\n","import firebase from 'firebase';\n\nexport interface details{\n    nameOfRecipe: string,\n    personWhoCooks: string,\n    DocumentReference: firebase.firestore.DocumentReference,\n}\n\n\nexport class FirebaseRecipe {\n    firestoreInstance: firebase.firestore.Firestore;\n    storageFirebase: firebase.storage.Storage;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n        this.storageFirebase = firebase.storage();\n    }\n\n\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addHighCalorie = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"YüksekKalorili\",\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/YüksekKalorili\").add(data);\n\n\n    }\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addLowCalorie = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"DüşükKalorili\",\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DüşükKalorili\").add(data);\n\n\n    }\n\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addFitDesert = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"FitTatlılar\",\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/FitTatlılar\").add(data);\n\n\n    }\n\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addFastRecipe = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"HızlıTarifler\",\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/HızlıTarifler\").add(data);\n\n\n    }\n\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addLookingNew = async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"DeğişiklikArayanlar\",\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DeğişiklikArayanlar\").add(data);\n\n\n    }\n    /**\n     * @param {string} imageURL firebase storage url of the recipe\n     * @param {string} recipeName max lenght 70 characters.\n     * @param {string} ingredients recipe ingredients.\n     * @param {string} howToCook the explanantion of cooking.\n     * @param {int} calorie the calorie of recipe.\n     * @param {double} protein the protein of recipe as gr.\n     * @param {double} carb the carb of recipe as gr.\n     * @param {double} fat the fat of recipe as gr.\n     * @param {string} servingSize portion (porsiyon) of the Meal\n     * @param {string} nameSurname the name of the person who cookes \n     */\n\n    addStudentRecipe= async (imageURL: string, recipeName: string, ingredients: string, howToCook: string, calorie: number, protein: number, carb: number, fat: number, servingSize: string, nameSurname: string) => {\n\n        let data = {\n            \n            Kalori: { \n                Kalori: calorie.toString(), \n                Karbonhidrat: carb.toString(),\n                Protein: protein.toString(),\n                Yağ: fat.toString(),\n            },\n            Kategori: \"ÖğrencilereÖzel\",\n            Porsiyon: servingSize,\n            Resim: imageURL,\n            Tarifinİsmi:recipeName,\n            Yapılışı:howToCook,\n            YapanKişi:nameSurname,\n            İçindekiler:ingredients,\n\n        }\n\n        await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/ÖğrencilereÖzel\").add(data);\n\n\n    }\n    \n\n     /**\n     * @param {ArrayBuffer} image\n     * @returns {string} download url\n     */\n    uploadImage = async (image: ArrayBuffer) => {\n        let date = new Date().getTime()\n        let answer = await this.storageFirebase.ref('Tarif/' + date).put(image);\n        return answer.ref.getDownloadURL();\n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getHighCalories = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/YüksekKalorili\").get()).docs;\n        return arrayOfDocs;\n    };\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getLowCalories = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DüşükKalorili\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getFitDeserts = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/FitTatlılar\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getFastRecipes = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/HızlıTarifler\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getLookingNew = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/DeğişiklikArayanlar\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n    /**\n     * @return {firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>[]} arrayOfDocs all documents for HighCalori Recipes\n     */\n    getStudentRecipe = async() =>{\n        let arrayOfDocs: Array<firebase.firestore.DocumentSnapshot>  =  (await this.firestoreInstance.collection(\"/BeslenmeApp/AllDatas/Tarifler/Kategoriler/ÖğrencilereÖzel\").get()).docs;\n\n        return arrayOfDocs;\n        \n    };\n\n  \n\n    /**\n     * @param {firebase.firestore.DocumentSnapshot} data this is the DocumentSnapshot for individual recipes.\n     * @returns {details} all necessary datas for deleting updating a document\n     */\n    getDetailsOfDocument = ( data: firebase.firestore.DocumentSnapshot) => {\n        \n\n        return {\n            nameOfRecipe: data.data()!.Tarifinİsmi,\n            personWhoCooks: data.data()!.YapanKişi,\n            DocumentReference: data.ref,\n        } as details;\n       \n\n    };\n\n\n    /**\n     * @param {firebase.firestore.DocumentReference} documentReference the reference of a specific document\n     */\n    deleteRecipe = async(documentReference: firebase.firestore.DocumentReference)=>{\n        let urlImage: string = (await documentReference.get()).data()!.Resim;\n        await firebase.storage().refFromURL(urlImage).delete();\n        await documentReference.delete();\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe } from '../backend/FirebaseRecipe';\nconst toArrayBuffer = require('to-array-buffer');\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(70)\n        .required('Boş bırakılamaz'),\n    ingredients: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    howToCook: Yup.string()\n        .min(2)\n        .required('Boş bırakılamaz'),\n    protein: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    carb: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    fat: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    calorie: Yup.number()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    servingSize: Yup.string()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    nameSurname: Yup.string()\n        .min(0)\n        .required('Boş bırakılamaz'),\n    type: Yup.string()\n        .min(1)\n        .required(\"Boş bıraklılamaz\"),\n    image: Yup.mixed().required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    user: {\n        title: string,\n        ingredients: string,\n        howToCook: string,\n        calorie: string,\n        protein: string,\n        carb: string,\n        type: string,\n        image: File | null,\n        fat: string,\n        servingSize: string,\n        imagepreview: string,\n        nameSurname: string\n    };\n}\n\nclass RecipePage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                type: 'addFastRecipe',\n                title: '',\n                calorie: '',\n                carb: '',\n                fat: '',\n                imagepreview: '',\n                image: null,\n                howToCook: '',\n                ingredients: '',\n                nameSurname: '',\n                protein: '',\n                servingSize: ''\n            },\n        };\n    }\n\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    render() {\n        return (\n            <Container>\n                <Link style={{ color: 'blue' }} to=\"delrecipe\">\n                    Tarifi Sil\n                </Link>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        console.log('submit');\n                        actions.setSubmitting(false);\n                        console.log(values);\n                        try {\n                            let FR = new FirebaseRecipe();\n                            let res;\n                            values.ingredients += '\\n' + values.servingSize + '\\n';\n                            let base64 = await this.getBase64(values.image!);\n                            console.log(base64);\n                            let convert = toArrayBuffer(base64);\n                            console.log(convert);\n                            const imgurl = await FR.uploadImage(convert);\n                            console.log(imgurl);\n                            if (imgurl === null) throw new Error('Error with image upload');\n                            if (values.type === 'addFastRecipe') {\n                                res = await FR.addFastRecipe(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addFitDesert') {\n                                res = await FR.addFitDesert(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addHighCalorie') {\n                                res = await FR.addHighCalorie(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addLookingNew') {\n                                res = await FR.addLookingNew(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addLowCalorie') {\n                                res = await FR.addLowCalorie(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else if (values.type === 'addStudentRecipe') {\n                                res = await FR.addStudentRecipe(imgurl, values.title, values.ingredients, values.howToCook, parseInt(values.calorie), parseFloat(values.protein), parseFloat(values.carb), parseFloat(values.fat), values.servingSize, values.nameSurname);\n                            } else throw new Error('Wrong type');\n                            console.log(res);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={({ setFieldValue, values }) => (\n                        <Form>\n                            <Field\n                                name=\"type\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Label>Tarif Tipi</BForm.Label>\n                                            <BForm.Control as=\"select\" {...field} placeholder=\"Başlık (Max 80 karakter)\">\n                                                <option value=\"addFastRecipe\">Pratik Tarif</option>\n                                                <option value=\"addFitDesert\">Fit Tatlı</option>\n                                                <option value=\"addHighCalorie\">Yüksek Kalori</option>\n                                                <option value=\"addLookingNew\">Değişiklik Arayanlar</option>\n                                                <option value=\"addLowCalorie\">Düşük Kalori</option>\n                                                <option value=\"addStudentRecipe\">Öğrencilere Özel</option>\n                                            </BForm.Control>\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Yemeğin İsmi\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"ingredients\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                as=\"textarea\"\n                                                rows=\"6\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"İçindekiler\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"howToCook\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                as=\"textarea\"\n                                                rows=\"10\"\n                                                {...field}\n                                                placeholder=\"Yapılışı\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"calorie\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Kalori\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"protein\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Protein\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"carb\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Karbonhidrat\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"fat\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Yağ\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"servingSize\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Porsiyon\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"nameSurname\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            autoComplete=\"off\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Ad Soyad\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n\n                            <Field name=\"image\">\n                                {({ field, form, meta }: any) => {\n                                    return (\n                                        <BFormGroup>\n                                            <div className=\"input-group\">\n                                                <div className=\"input-group-prepend\">\n                                                    <span className=\"input-group-text\">Upload</span>\n                                                </div>\n                                                <div className=\"custom-file\">\n                                                    <input\n                                                        name=\"image\"\n                                                        onChange={async (event: React.ChangeEvent<HTMLInputElement>) => {\n                                                            console.log(event.currentTarget.files![0]);\n                                                            setFieldValue('image', event.currentTarget.files![0]);\n                                                            let { user } = this.state;\n                                                            user.imagepreview = await this.getBase64(event.currentTarget.files![0]);\n                                                            this.setState({\n                                                                user,\n                                                            });\n                                                        }}\n                                                        type=\"file\"\n                                                        accept=\"image/*\"\n                                                        className=\"custom-file-input\"\n                                                    />\n                                                    <label className=\"custom-file-label\">\n                                                        {values.image !== null ? values.image.name : 'Fotoğraf'}\n                                                    </label>\n                                                </div>\n                                            </div>\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            </Field>\n                            {this.state.user.imagepreview === '' ? (\n                                <div />\n                            ) : (\n                                    <Container style={{ textAlign: 'center' }}>\n                                        <Image\n                                            style={{\n                                                width: '15rem',\n                                                height: '15rem',\n                                            }}\n                                            src={this.state.user.imagepreview}\n                                        />\n                                    </Container>\n                                )}\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button onClick={() => console.log('press')} type=\"submit\">\n                                    Gönder\n                                </Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(RecipePage);\n","import firebase from 'firebase';\n\ninterface FAQData {\n    Soru: Array<{\n        Başlık: string;\n        Cevap: string;\n        Kaynak: string;\n    }>;\n}\n\nexport class FirebaseFAQ {\n    firestoreInstance: firebase.firestore.Firestore;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n    }\n\n    /**\n     * Doğru Bilinen Yanlışlar\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddFalseKnownTrue = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Doğru Bilinen yanlışlar\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData> = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('DoğruBilinenYanlışlar')\n            .get();\n\n        if (snapshot.exists) {\n            console.log('There is the doc');\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('DoğruBilinenYanlışlar')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('DoğruBilinenYanlışlar')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n\n    /**\n     * Kilo Alma\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddGainWeight = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Kilo Alma\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData> = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('KiloAlma')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloAlma')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloAlma')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n\n    /**\n     * Kilo Verme\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddLoseWeight = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Kilo Verme\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentData = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('KiloVerme')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloVerme')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('KiloVerme')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n\n    /**\n     * Sağlıklı Yaşam\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddHealthLife = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Sağlıklı Yaşam\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentData = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('SağlıklıYaşam')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('SağlıklıYaşam')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('SağlıklıYaşam')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n    /**\n     * Şaşırtan Bilgiler\n     * @param {string} header this is the question itself.\n     * @param {string} answer the answer of the question.\n     * @param {string} references the references used in answer.\n     */\n    AddInterestingFacts = async (header: string, answer: string, references: string) => {\n        /*\n         * This Function takes all data of the category of \"Sağlıklı Yaşam\".\n         * Questions are inside of an array, an element of array is a Map {Başlık:\"\", Cevap:\"\", Kaynak:\"\"}.\n         * For example, questions[0] = {Başlık:\"\", Cevap:\"\", Kaynak: \"\"}\n         * Full Document is like { \"Soru\": [ { First Question }, { Second Question }, ]  }\n         */\n\n        let snapshot: firebase.firestore.DocumentData = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/SSS')\n            .doc('ŞaşırtanBilgiler')\n            .get();\n\n        if (snapshot.exists) {\n            let allData = snapshot.data() as FAQData;\n            let questionArray = allData.Soru;\n            /**\n             * This part of function adds the new question to Question Array.\n             */\n            questionArray.push({\n                Başlık: header,\n                Cevap: answer,\n                Kaynak: references,\n            });\n\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('ŞaşırtanBilgiler')\n                .set({ Soru: questionArray });\n        } else {\n            await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/SSS')\n                .doc('ŞaşırtanBilgiler')\n                .set({\n                    Soru: [\n                        {\n                            Başlık: header,\n                            Cevap: answer,\n                            Kaynak: references,\n                        },\n                    ],\n                });\n        }\n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseFAQ } from '../backend/FirebaseFAQ';\n\nconst valSchema = Yup.object().shape({\n    title: Yup.string()\n        .min(2)\n        .max(80)\n        .required('Boş bırakılamaz'),\n    description: Yup.string()\n        .min(2)\n        .max(1000)\n        .required('Boş bırakılamaz'),\n    resource: Yup.string()\n        .min(2)\n        .max(300)\n        .required('Boş bırakılamaz'),\n    type: Yup.string()\n        .min(1)\n        .required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps {}\n\ninterface State {\n    user: {\n        title: string;\n        description: string;\n        resource: string;\n        type: string;\n    };\n}\n\nclass FAQPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                title: '',\n                description: '',\n                resource: '',\n                type: 'FalseKnownTrue',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        console.log('submit');\n                        actions.setSubmitting(false);\n                        console.log(values);\n                        try {\n                            let FAQ = new FirebaseFAQ();\n                            let res;\n                            if (values.type === 'FalseKnownTrue') {\n                                res = await FAQ.AddFalseKnownTrue(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddGainWeight') {\n                                res = await FAQ.AddGainWeight(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddHealthLife') {\n                                res = await FAQ.AddHealthLife(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddInterestingFacts') {\n                                res = await FAQ.AddInterestingFacts(values.title, values.description, values.resource);\n                            } else if (values.type === 'AddLoseWeight') {\n                                res = await FAQ.AddLoseWeight(values.title, values.description, values.resource);\n                            } else throw new Error('Wrong type');\n                            console.log(res);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"type\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Label>SSS Tipi</BForm.Label>\n                                            <BForm.Control as=\"select\" {...field} placeholder=\"Başlık (Max 80 karakter)\">\n                                                <option value=\"AddGainWeight\">Kilo Alma</option>\n                                                <option value=\"AddLoseWeight\">Kilo Verme</option>\n                                                <option value=\"AddHealthLife\">Sağlıklı Yaşam</option>\n                                                <option value=\"FalseKnownTrue\">Doğru Bilinen Yanlışlar</option>\n                                                <option value=\"AddInterestingFacts\">Şaşırtıcı Bilgiler</option>\n                                            </BForm.Control>\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"title\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => {\n                                    return (\n                                        <BFormGroup>\n                                            <BForm.Control\n                                                type=\"text\"\n                                                autoComplete=\"off\"\n                                                {...field}\n                                                placeholder=\"Başlık (Max 80 karakter)\"\n                                            />\n                                            {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                        </BFormGroup>\n                                    );\n                                }}\n                            />\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"8\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Field\n                                name=\"resource\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"2\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Kaynak\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button onClick={() => console.log('press')} type=\"submit\">\n                                    Gönder\n                                </Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(FAQPage);\n","import firebase from 'firebase';\n\n\nexport class QuoteOfDay {\n    firestoreInstance: firebase.firestore.Firestore;\n\n    constructor() {\n        this.firestoreInstance = firebase.firestore();\n    }\n\n    /**\n     * @param {string} newQuote this is input for adding new quote to database.\n     * newQuote can consists of person name.\n     * @example1 newQuote = \"Su akar yolunu bulur\"\n     * @example2 newQuote = \"Koşmayı bıraktığın gün, vardığın gün. - E. Soley\"\n     */\n    addNewQuote = async (newQuote: string) => {\n        let snapshot: firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData> = await this.firestoreInstance\n            .collection('/BeslenmeApp/AllDatas/GününSözü')\n            .doc('doc')\n            .get();\n        console.log(snapshot);\n        console.log(snapshot.exists);\n        if (snapshot.exists) {\n            let quoteData = snapshot.data()!.sözler;\n            quoteData.push(newQuote);\n             await this.firestoreInstance\n                .collection('/BeslenmeApp/AllDatas/GününSözü')\n                .doc('doc')\n                .set({sözler: quoteData}); \n\n        } \n    };\n}\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { QuoteOfDay } from '../backend/FirebaseQuoteOfDay';\n\nconst valSchema = Yup.object().shape({\n    description: Yup.string()\n        .min(2)\n        .max(300)\n        .required('Boş bırakılamaz'),\n});\n\ninterface Props extends RouteComponentProps {}\n\ninterface State {\n    user: {\n        description: string;\n    };\n}\n\nclass QuoteOfDayPage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            user: {\n                description: '',\n            },\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Formik\n                    initialValues={this.state.user}\n                    onSubmit={async (values, actions) => {\n                        console.log('submit');\n                        actions.setSubmitting(false);\n                        console.log(values);\n                        try {\n                            let QOD = new QuoteOfDay();\n                            let res = await QOD.addNewQuote(values.description);\n                            console.log(res);\n                            this.props.history.push('/');\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }}\n                    validationSchema={valSchema}\n                    render={(formikBag) => (\n                        <Form>\n                            <Field\n                                name=\"description\"\n                                //@ts-ignore\n                                render={({ field, form, meta }) => (\n                                    <BFormGroup>\n                                        <BForm.Control\n                                            as=\"textarea\"\n                                            autoComplete=\"off\"\n                                            rows=\"8\"\n                                            type=\"text\"\n                                            {...field}\n                                            placeholder=\"Detay\"\n                                        />\n                                        {meta.touched && meta.error && <div className=\"text-danger\">{meta.error}</div>}\n                                    </BFormGroup>\n                                )}\n                            />\n                            <Row style={{ justifyContent: 'center' }}>\n                                <Button onClick={() => console.log('press')} type=\"submit\">\n                                    Gönder\n                                </Button>\n                            </Row>\n                        </Form>\n                    )}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(QuoteOfDayPage);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { FaTrash, FaThumbsDown } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe, details } from '../backend/FirebaseRecipe';\nconst toArrayBuffer = require('to-array-buffer');\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    dataFast: Array<firebase.firestore.DocumentSnapshot>,\n    dataFit: Array<firebase.firestore.DocumentSnapshot>,\n    dataHigh: Array<firebase.firestore.DocumentSnapshot>,\n    dataLooking: Array<firebase.firestore.DocumentSnapshot>,\n    dataLow: Array<firebase.firestore.DocumentSnapshot>,\n    dataStudent: Array<firebase.firestore.DocumentSnapshot>\n}\n\nclass DeleteRecipePage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            dataFast: [],\n            dataFit: [],\n            dataHigh: [],\n            dataLooking: [],\n            dataLow: [],\n            dataStudent: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.getItems()\n    }\n\n\n    getBase64 = (file: File): Promise<string> => {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onload = function () {\n                resolve(reader.result as string);\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(file as Blob);\n        });\n    };\n\n    getItems = async () => {\n        let rec = new FirebaseRecipe()\n        let dataFast = await rec.getFastRecipes()\n        let dataFit = await rec.getFitDeserts()\n        let dataHigh = await rec.getHighCalories()\n        let dataLooking = await rec.getLookingNew()\n        let dataLow = await rec.getLowCalories()\n        let dataStudent = await rec.getStudentRecipe()\n        this.setState({ dataFit, dataStudent, dataLow, dataLooking, dataHigh, dataFast });\n    }\n\n    render() {\n        return (\n            <Container>\n                <div>Fit Tatlılar</div>\n                <ul>\n                    {this.state.dataFit.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Pratik Tarifler</div>\n                <ul>\n                    {this.state.dataFast.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Yüksek Kalori</div>\n                <ul>\n                    {this.state.dataHigh.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Düşük Kalori</div>\n                <ul>\n                    {this.state.dataLow.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Değişklik Arayanlar</div>\n                <ul>\n                    {this.state.dataLooking.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n                <div>Öğrencilere Özel</div>\n                <ul>\n                    {this.state.dataStudent.map((i) => {\n                        return (\n                            <li>Tarifin İsmi: {i.data()!.Tarifinİsmi}{'\\n'} Yazar: {i.data()!.YapanKişi} <FaTrash onClick={async () => {\n                                let rec = new FirebaseRecipe()\n                                let data = rec.getDetailsOfDocument(i);\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteRecipe(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n            </Container>\n        );\n    }\n}\n\n\nexport default withRouter(DeleteRecipePage);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport BForm from 'react-bootstrap/Form';\nimport BFormGroup from 'react-bootstrap/FormGroup';\nimport * as Yup from 'yup';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { FaTrash, FaThumbsDown } from 'react-icons/fa'\nimport Row from 'react-bootstrap/Row';\nimport { Formik, Field, Form } from 'formik';\nimport { FirebaseRecipe, details } from '../backend/FirebaseRecipe';\nimport { FirebaseBlogOperations } from '../backend/FirebaseBlog';\nconst toArrayBuffer = require('to-array-buffer');\n\ninterface Props extends RouteComponentProps { }\n\ninterface State {\n    data: Array<firebase.firestore.DocumentSnapshot>,\n}\n\nclass DeleteRecipePage extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: []\n        };\n    }\n\n    async componentDidMount() {\n        await this.getItems()\n    }\n  \n\n\n    getItems = async () => {\n        let rec = new FirebaseBlogOperations()\n        let data = await rec.getBlogDocs()\n        this.setState({ data });\n    }\n\n    render() {\n        return (\n            <Container>\n                <div>Bloglar</div>\n                <ul>\n                    {this.state.data.map((i) => {\n                        let rec = new FirebaseBlogOperations()\n                        let data = rec.getDetailsOfDocument(i);\n                        return (\n                            <li>Blog İsmi: {data.title}{'\\n'} Yazar: {data.author} <FaTrash onClick={async () => {\n                                let answer = window.confirm(\"Delete data?\")\n                                console.log(answer);\n                                if (answer)\n                                    await rec.deleteBlogPost(data.DocumentReference);\n                                this.props.history.replace(\"/\")\n                            }} /></li>\n                        );\n                    })}\n                </ul>\n            </Container>\n        );\n    }\n}\n\n\nexport default withRouter(DeleteRecipePage);\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { User } from './reducer/Actions';\nimport HomePage from './screens/HomePage';\nimport LoginPage from './screens/LoginPage';\nimport NavBar from './components/NavBar/NavBar';\nimport BlogPage from './screens/BlogPage';\nimport RecipePage from './screens/RecipePage';\nimport FAQPage from './screens/FAQPage';\nimport QODPage from './screens/QuotePage';\nimport DeleteRecipePage from './screens/DeleteRecipePage';\nimport DeleteBlogPage from './screens/DeleteBlogPage';\n\ninterface Props {\n    user: User;\n}\n\nexport class AppNav extends Component<Props> {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <NavBar />\n                    <Route path=\"/login\" exact component={LoginPage} />\n                    <Route\n                        path=\"/addblog\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <BlogPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/delblog\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <DeleteBlogPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/qod\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <QODPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/addrecipe\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <RecipePage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/delrecipe\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <DeleteRecipePage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/faq\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <FAQPage />;\n                        }}\n                    />\n                    <Route\n                        path=\"/\"\n                        exact\n                        render={() => {\n                            if (this.props.user.username === '') return <Redirect to={{ pathname: '/login' }} />;\n                            return <HomePage />;\n                        }}\n                    />\n                </div>\n            </Router>\n        );\n    }\n}\n\ninterface StateRedux {\n    user: User;\n}\n\nconst mapStateToProps = (state: StateRedux) => {\n    const { user } = state;\n    return { user };\n};\n\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppNav);\n","import { createStore, combineReducers } from 'redux';\nimport { User } from './Actions';\nimport firebase from 'firebase';\nimport { firebaseid } from '../appid';\n\ninterface ActionUser {\n    payload: User;\n    type: string;\n}\n\nfirebase.initializeApp(firebaseid);\n\nlet firebaseuserfunc = () => {\n    if (localStorage.getItem('firebaseuser') !== '' && localStorage.getItem('firebaseuser') !== null)\n        return JSON.parse(localStorage.getItem('firebaseuser')!) as firebase.User;\n    else return '';\n};\n\nlet INITIAL_STATE = {\n    username: localStorage.getItem('username') ? localStorage.getItem('username') : '',\n    firebaseuser: firebaseuserfunc(),\n};\n\nlet user = (state = INITIAL_STATE, action: ActionUser) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return (state = action.payload);\n        default:\n            return state;\n    }\n};\n\nexport const store = createStore(combineReducers({ user }));\n","export const firebaseid = {\n    apiKey: \"AIzaSyBn4BzBjPoDRiRD0zOAA56Ge0pONpQ6d6c\",\n    authDomain: \"beslenmeblog-c313a.firebaseapp.com\",\n    databaseURL: \"https://beslenmeblog-c313a.firebaseio.com\",\n    projectId: \"beslenmeblog-c313a\",\n    storageBucket: \"beslenmeblog-c313a.appspot.com\",\n    messagingSenderId: \"1042722828462\",\n    appId: \"1:1042722828462:web:aa5fc3f5539343c1c47d3f\",\n    measurementId: \"G-LMXB8WYNJD\"\n};","import React, { Component } from 'react';\nimport AppNav from './AppNav';\nimport { Provider } from 'react-redux';\nimport { store } from './reducer/Reducers';\n\nexport class App extends Component {\n    \n\n    render() {\n        return (\n            <Provider store={store}>\n                <AppNav />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}